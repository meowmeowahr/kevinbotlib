{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to KevinbotLib","text":"<p>KevinbotLib is a modular robot control system integrating a high-speed server-client communication system, robust logging, gamepad inputs, and more.</p>"},{"location":"#features","title":"Features","text":""},{"location":"#the-command-scheduler","title":"The Command Scheduler","text":"<ul> <li>A way to asynchronously run robot tasks</li> <li>Commands can be grouped to run sequentially or in parallel if desired</li> <li>Commands can be executed at a set interval</li> </ul>"},{"location":"#the-communication-system","title":"The Communication System","text":"<ul> <li>Uses Redis for set/get and pub/sub communication</li> <li>Data can be easily sent from robot to client or vice versa</li> <li>Data is synchronized between all clients</li> <li>Out-of-the-box ready-made sendables for builtin primitive types</li> <li>Create custom sendables based on pydantic models</li> </ul>"},{"location":"#the-vision-pipeline-system","title":"The Vision Pipeline System","text":"<ul> <li>Create vision pipelines based on OpenCV</li> <li>Pre-made sendables for video frames</li> <li>Pre-made encoders and decoders for the communication system</li> </ul>"},{"location":"#robust-logging","title":"Robust Logging","text":"<ul> <li>Logging is based on loguru</li> <li>Automatic file rotations</li> <li>Logs to <code>stdout</code>, an inbuilt file server over HTTP, and/or files.</li> </ul>"},{"location":"#gamepad-inputs","title":"Gamepad Inputs","text":"<ul> <li>Based on SDL2</li> <li>Builtin-support for all Game Controllers supported under the SDL2 GameController API</li> <li>Joystick data sender and receiver through the communication system</li> </ul>"},{"location":"#the-control-console","title":"The Control Console","text":"<ul> <li>Operate a KevinbotLib robot through a simple GUI interface</li> <li>Supports up to 8 gamepad devices (up to 32 buttons each)</li> <li>View live robot telemetry</li> <li>View battery voltage (planned)</li> <li>Change robot state and OpModes</li> <li>Monitor robot system metrics</li> </ul> <p>Development</p> <p>This project is in the early stage of development. There are many missing functions that will be supported in the future.</p>"},{"location":"commandscheduler/","title":"The Command Scheduler","text":""},{"location":"commandscheduler/#architecture-diagram","title":"Architecture Diagram","text":""},{"location":"commandscheduler/#why-use-the-command-scheduler","title":"Why use the command scheduler?","text":"<p>The command scheduler offers a unique way to run commands in a robot program.  Commands can be run in parallel, sequentially, or in the main scheduler FIFO queue. This allows for more flexibility when compared with traditional linear programming. Commands may be scheduled using a trigger.</p>"},{"location":"fileserver/","title":"The File Server","text":"<p>The KevinbotLib file server is a simple HTML/HTTP file server for KevinbotLib.  Files and subdirectories can be served.</p> <p>The KevinbotLib file server is used internally inside The Robot Class to serve log files.</p> <p>Note</p> <p>The File server is not required to use the KevinbotLib Log Downloader, since that uses SFTP/SSH.</p> <p></p>"},{"location":"installation/","title":"Installation","text":"<p>Info</p> <p>KevinbotLib requires Python 3.10 or newer.</p>"},{"location":"installation/#install-with-pip","title":"Install with pip","text":"<p>Run the following in a virtual environment for the base version.</p> <pre><code>pip install kevinbotlib\n</code></pre> <p>Note</p> <p>Some Linux systems require adding the user to the <code>dialout</code> group to access serial-connected hardware</p> <p>Run the following command to add yourself to the group: <pre><code>sudo usermod -a -G dialout $USER\n</code></pre></p>"},{"location":"installation/#install-with-pipx","title":"Install with pipx","text":"<p>Tip</p> <p>pipx installation will only install command-line tools, and GUI applications. Use the regular pip installation if you want any development modules.</p> <ol> <li>Install pipx here</li> <li> <p>Install KevinbotLib</p> <p>Run the follwoing:s <pre><code>pipx install kevinbotlib\n</code></pre></p> </li> </ol>"},{"location":"installation/#pre-built-binaries","title":"Pre-Built Binaries","text":"<p>KevinbotLib Pre-Built Binaries are available from the GitHub Releases Page.</p> <p>Versions for Windows x64, macOS Intel, macOS ARM, and Linux x64 are available.</p> <p>Note</p> <p>macOS builds come in two separate packages, <code>cli-tools</code>, and <code>apps</code></p> <p><code>cli-tools</code> includes the <code>kevinbotlib</code> command line. The <code>cli-tools</code> build also bundles the KevinbotLib Applications, but must be launched manually from a command line.</p> <p><code>apps</code> includes individual macOS applications for each of KevinbotLib's apps.</p>"},{"location":"installation/#verify-installation","title":"Verify installation","text":"<p>You can check the installed version of KevinbotLb by running the following command (does not apply to application-only installation)</p> <pre><code>kevinbotlib --version\n</code></pre> <p>You should see something like this <code>KevinbotLib, version 1.0.0-alpha.13</code></p>"},{"location":"robot/","title":"The Robot Class","text":"<p>Note</p> <p>The main robot class can only be used once within your project</p> <p>Danger</p> <p>The safety features included within KevinbotLib are not guaranteed to always function.</p> <p>It is always recommended to add a physical emergency stop system to your robot.</p> <p>The KevinbotLib main robot class is the starting point for your robotics project. It integrates many components of KevinbotLib to make it easy to design your own robot.</p>"},{"location":"robot/#features","title":"Features","text":"<p>The KevinbotLib Robot class sets up some components of KevinbotLib to make designing a robot easier. The components are listed below.</p> <ul> <li>Communication Client</li> <li>Logging Configuration</li> <li>Periodic log file rotations</li> <li>Logging to HTTP Server</li> <li>Control Console communication and management</li> <li>Robot operational mode management</li> <li>Safety features</li> <li>Signal shutdown support (POSIX only)</li> </ul>"},{"location":"robot/#usage","title":"Usage","text":"<ul> <li>Extend the BaseRobot class and add your own code.</li> <li>Call <code>YourRobotClassName().run()</code> to start the robot's execution</li> <li>All the components listed above will be started up automatically \ud83d\ude00</li> </ul> <p>Warning</p> <p>It is not recommended to override the <code>run</code> method, or any other private method marked with the <code>@final</code> decorator.</p>"},{"location":"robot/#shutdown-signals","title":"Shutdown signals","text":"<p>Note</p> <p>The shutdown signals are only supported on POSIX OSes (like Linux or macOS). They are not supported on Windows due to the lack of user signals in the NT kernel.</p>"},{"location":"robot/#sigusr1","title":"<code>SIGUSR1</code>","text":"<p>This will trigger a graceful system shutdown similar to <code>CTRL-C</code> on the console</p> <p>This should leave the robot in a state where it's ready for a code restart</p> <p>Info</p> <p>This will cause the application to end with exit code <code>64</code></p>"},{"location":"robot/#sigusr2","title":"<code>SIGUSR2</code>","text":"<p>This will trigger an emergency shutdown similar to hitting space on the Control Console</p> <p>Info</p> <p>This will cause the application to end with exit code <code>65</code></p> <p>Example</p> <p>If the robot code's PID (process id) is 1234, you can run the following command to gracefully shut it down:</p> <pre><code>kill -SIGUSR1 1234\n</code></pre>"},{"location":"apps/console/","title":"Control Console","text":""},{"location":"apps/console/controllers/","title":"Controllers Tab","text":""},{"location":"apps/console/launching/","title":"Launching","text":"<p>KevinbotLib Control Console can be run using the following command:</p> <pre><code>kevinbotlib apps console\n</code></pre> <p>View the full command-line reference here</p>"},{"location":"apps/console/metrics/","title":"Metrics Tab","text":""},{"location":"apps/console/run/","title":"Run Tab","text":""},{"location":"apps/console/settings/","title":"Settings Tab","text":""},{"location":"apps/dashboard/","title":"KevinbotLib Dashboard","text":"<p>KevinbotLib Dashboard allows interaction and monitoring of robot network data over RedisCommClient. Its powerful and customizable drag-and-drop widget system allows for the creation of personalized robot control interfaces.</p> <p>Caution</p> <p>KevinbotLib Dashboard is not intended for use as a safety system.</p> <p>Warning</p> <p>KevinbotLib Dashboard supports all of KevinbotLib's builtin RedisCommClient Sendables. Support for custom sendables or plugins has not been implemented yet.</p> <p></p>"},{"location":"apps/dashboard/launching/","title":"Launching","text":"<p>KevinbotLib Dashboard can be run using the following command:</p> <pre><code>kevinbotlib apps dashboard\n</code></pre> <p>View the full command-line reference here</p>"},{"location":"apps/dashboard/settings/","title":"Configuration","text":"<p>Use the Edit &gt; Settings menu item or Ctrl+, to open the configuration window.</p>"},{"location":"apps/dashboard/settings/#theme","title":"Theme","text":"<p>The theme option will require a restart after changing the setting.</p>"},{"location":"apps/dashboard/settings/#grid","title":"Grid","text":"<ul> <li> <p>Grid Size</p> <p>The grid size option changes the number of pixels per grid division</p> </li> <li> <p>Grid Rows and Columns</p> <p>The grid rows and columns settings change the number of grid divisions</p> <p>Note</p> <p>The grid rows and columns can not be set lower than the number of rows and/or columns used by the layout.</p> </li> </ul>"},{"location":"apps/dashboard/settings/#network","title":"Network","text":"<p>Set the IP Address and Port to that of your robot.</p> <p>The standard port used by KevinbotLib is 6379.</p>"},{"location":"apps/dashboard/settings/#polling","title":"Polling","text":"<p>The polling rate defines the frequency for pulling network data for ALL keys.</p>"},{"location":"apps/dashboard/ui/","title":"User Interface","text":""},{"location":"apps/dashboard/ui/#status-bar","title":"Status Bar","text":"<p>The dashboard bottom status bar shows the connection state, e.g. <code>Robot Connected</code> or <code>Robot Disconnected</code>, IP Address, and the round-trip latency.</p> <p></p>"},{"location":"apps/dashboard/ui/#widget-grid","title":"Widget Grid","text":"<p>The widget grid supports dragging-and-dropping widgets. An unsuccessful drag (indicated by a red highlight) will cause the widget to snap back to its original spot.</p> <p>Widgets can be resized by dragging their bottom right corner.</p> <p></p>"},{"location":"apps/dashboard/ui/#sidebar","title":"Sidebar","text":"<p>The sidebar can be resized or hidden entirely by dragging the splitter.</p> <p></p>"},{"location":"apps/dashboard/ui/#data-tree","title":"Data Tree","text":"<p>The data tree will show all Sendable keys on the network that contain a valid structure. Key groups are separated with a forward slash. Selecting a key will display it in the Sendable Viewer</p> <p></p>"},{"location":"apps/dashboard/ui/#sendable-viewer","title":"Sendable Viewer","text":"<p>The sendable viewer can preview data before adding a widget to the grid. The viewer also contains a raw view that allows you to see the raw JSON data of the Sendable.</p> <p>Clicking on a widget type will add the widget to the grid if a slot is available.</p> <p></p>"},{"location":"apps/dashboard/ui/#log-viewer","title":"Log Viewer","text":"<p>The log viewer can be used to diagnose issues with KevinbotLib Dashboard. The log viewer is limited to 100 lines before removing the oldest line.</p> <p>Click on the \"Dashboard Logs\" button to expand/collapse it.</p> <p></p> <p>Note</p> <p>The dashboard log viewer will not display any robot logs. Only log messages generated internally by KevinbotLib Dashboard</p>"},{"location":"apps/dashboard/widgets/","title":"Widgets","text":""},{"location":"apps/dashboard/widgets/#base-widget","title":"Base Widget","text":"<p>This widget is used internally within KevinbotLib Dashboard. It cannot be added from a network sendable.  It may replace a widget in the case of an error.</p>"},{"location":"apps/dashboard/widgets/#text-widget","title":"Text Widget","text":"<p>This is the most basic widget.  It will display text from a sendable structure.  Each dashboard structure element will be displayed in a new line.</p>"},{"location":"apps/dashboard/widgets/#compatible-data-types","title":"Compatible Data Types","text":"<ul> <li><code>StringSendable</code></li> <li><code>IntegerSendable</code></li> <li><code>FloatSendable</code></li> <li><code>BooleanSendable</code></li> <li><code>AnyListSendable</code></li> <li><code>DictSendable</code></li> <li><code>BinarySendable</code></li> </ul>"},{"location":"apps/dashboard/widgets/#big-text-widget","title":"Big Text Widget","text":"<p>This widget functions the same as the Text Widget, but with larger text.  The text size will automatically adjust to its content and grid span.</p>"},{"location":"apps/dashboard/widgets/#compatible-data-types_1","title":"Compatible Data Types","text":"<ul> <li><code>StringSendable</code></li> <li><code>IntegerSendable</code></li> <li><code>FloatSendable</code></li> <li><code>BooleanSendable</code></li> <li><code>AnyListSendable</code></li> <li><code>DictSendable</code></li> </ul>"},{"location":"apps/dashboard/widgets/#editable-text-widget","title":"Editable Text Widget","text":"<p>This widget allows for the editing of text, integers, and floating-point values. </p> <p>Editing the text line will cause the widget to enter \"edit mode,\" indicated by a red cross by the text line.  While in edit mode, new data received will not be displayed.</p> <p>Pressing the \"Submit\" button will repackage the last sendable received with the updated text, and send it back to the robot. This will also exit \"edit mode.\"</p> <p>Pressing the \"Cancel\" button will exit \"edit mode,\" and cause the data to reset.</p>"},{"location":"apps/dashboard/widgets/#compatible-data-types_2","title":"Compatible Data Types","text":"<ul> <li><code>StringSendable</code></li> <li><code>IntegerSendable</code></li> <li><code>FloatSendable</code></li> </ul>"},{"location":"apps/dashboard/widgets/#boolean-widget","title":"Boolean Widget","text":"<p>This widget can display boolean data as a colored rectangle.  The widget will default to False/red if there is no data.</p>"},{"location":"apps/dashboard/widgets/#compatible-data-types_3","title":"Compatible Data Types","text":"<ul> <li><code>BooleanSendable</code></li> </ul>"},{"location":"apps/dashboard/widgets/#color-widget","title":"Color Widget","text":"<p>This widget can display color strings as a colored rectangle.</p>"},{"location":"apps/dashboard/widgets/#supported-string-formats","title":"Supported String Formats","text":"<ul> <li><code>#RGB</code> (each of R, G, and B is a single hex digit)</li> <li><code>#RRGGBB</code></li> <li><code>#AARRGGBB</code></li> <li><code>#RRRGGGBBB</code></li> <li><code>#RRRRGGGGBBBB</code></li> <li>A name from the list of colors defined in the list of SVG color keyword names provided by the World Wide Web Consortium; for example, \"steelblue\" or \"gainsboro\".</li> <li><code>transparent</code> - representing the absence of a color.</li> </ul>"},{"location":"apps/dashboard/widgets/#compatible-data-types_4","title":"Compatible Data Types","text":"<ul> <li><code>StringSendable</code></li> </ul>"},{"location":"apps/dashboard/widgets/#mjpeg-streamer-widget","title":"MJPEG Streamer Widget","text":"<p>This widget can display an MJPEG stream from a video source.  The resolution will automatically adjust as needed.</p>"},{"location":"apps/dashboard/widgets/#configuration-options","title":"Configuration Options","text":"<p>The MJPEG stream allows for frame rate configuration from 1 to 20 FPS. Reduced frame rates will improve the overall dashboard performance.</p>"},{"location":"apps/dashboard/widgets/#compatible-data-types_5","title":"Compatible Data Types","text":"<ul> <li><code>kevinbotlib.vision.MjpegStreamSendable</code></li> </ul>"},{"location":"apps/dashboard/widgets/#battery-widget","title":"Battery Widget","text":"<p>This widget can display battery voltages in a simple and efficient graph.</p>"},{"location":"apps/dashboard/widgets/#configuration-options_1","title":"Configuration Options","text":"<p>The graphing range can be configured in the widget's settings.</p>"},{"location":"apps/dashboard/widgets/#compatible-data-types_6","title":"Compatible Data Types","text":"<ul> <li><code>FloatSendable</code></li> </ul>"},{"location":"apps/dashboard/widgets/#speedometer-widget","title":"Speedometer Widget","text":"<p>The speedometer widget can be used to display integers or floats in a highly configurable gauge.</p>"},{"location":"apps/dashboard/widgets/#configuration-options_2","title":"Configuration Options","text":"<ul> <li> <p>Display Value</p> <p>This defines whether to display the large text value at the bottom of the widget.</p> </li> <li> <p>Display Fine Tick Markers</p> <p>This defines whether to display fine ticks on the gauge scale.</p> </li> <li> <p>Display Coarse Tick Markers</p> <p>This defines whether to display coarse ticks on the gauge scale.</p> </li> <li> <p>Display Scale</p> <p>This defines whether to display the colored scale on the gauge.</p> </li> <li> <p>Scale Gradient</p> <p>These settings change the gradient pattern displayed on the gauge.</p> <p>Clicking add or edit to add a gradient stop will open the stop editor below:</p> <p></p> </li> <li> <p>Range</p> <p>The range options change the scale range from left-to-right.</p> </li> </ul>"},{"location":"apps/dashboard/widgets/#compatible-data-types_7","title":"Compatible Data Types","text":"<ul> <li><code>IntegerSendable</code></li> <li><code>FloatSendable</code></li> </ul>"},{"location":"apps/dashboard/widgets/#graph-widget","title":"Graph Widget","text":"<p>The graph widget can graph data with customizable properties.</p>"},{"location":"apps/dashboard/widgets/#configuration-options_3","title":"Configuration Options","text":"<ul> <li> <p>Auto-Scale</p> <p>The auto-scale option will make the Y-Axis automatically scale to new values Settings auto-scale will disable the range options</p> </li> <li> <p>Range</p> <p>The range options will set the y-axis range. These options are disabled when using Auto-Scale</p> </li> <li> <p>Data Points</p> <p>The data points option will determine how many pieces of data are stored at any given moment. A higher value will increase the amount of data in the graph.</p> </li> <li> <p>Line Color</p> <p>This option sets the color of the plot.</p> </li> <li> <p>Line Width</p> <p>This option sets the width of the plot.</p> </li> </ul>"},{"location":"apps/logdownloader/","title":"KevinbotLib Log Downloader","text":"<p>KevinbotLib Log Downloader allows you to easily extract, delete, and view logs remotely from a KevinbotLib Robot.</p> <p></p>"},{"location":"apps/logdownloader/connection/","title":"Connecting to a Target","text":""},{"location":"apps/logdownloader/controls/","title":"Remote Log Controls","text":""},{"location":"apps/logdownloader/launching/","title":"Launching","text":"<p>KevinbotLib Log Downloader can be run using the following command:</p> <pre><code>kevinbotlib apps logdownloader\n</code></pre> <p>View the full command-line reference here</p>"},{"location":"apps/logdownloader/viewing/","title":"Remote Log Viewing","text":""},{"location":"apps/logviewer/","title":"KevinbotLib Log Viewer","text":"<p>KevinbotLib Log Viewer allows you to view a locally stored KevinbotLib Log File.</p> <p></p>"},{"location":"apps/logviewer/launching/","title":"Launching","text":"<p>KevinbotLib Log Viewer can be run using the following command:</p> <pre><code>kevinbotlib apps logviewer\n</code></pre> <p>View the full command-line reference here</p>"},{"location":"apps/logviewer/loading/","title":"Loading a Log","text":"<p>When at the main page, <code>.log</code> files can be dropped into the section labeled \"Drop Log File.\"  You may also click to select a file.</p> <p>Info</p> <p>KevinbotLib Log Viewer only supports structured logs produced by KevinbotLib 1.0.0-alpha.12 or later.  A structured log can be easily identified as a plain-text file with a separate, parsable JSON serialized log entry on each line.</p> <p></p> <p>Clicking \"Load\" will load the log to be viewed.</p> <p>If the log file is corrupted, or is incompatible with KevinbotLib Log Viewer, you may receive the below error:</p> <p></p>"},{"location":"apps/logviewer/viewing/","title":"Viewing Logs","text":"<p>KevinbotLib Log Viewer features an extensive log browser with the following features:</p> <ul> <li>Color-coded log entries</li> <li>Log level, timestamp, and entry origin</li> <li>Formatted tracebacks</li> <li>Search</li> </ul> <p></p>"},{"location":"apps/logviewer/viewing/#navigation","title":"Navigation","text":"<p>The navigational buttons correspond to the following actions in left-to-right order:</p> <ul> <li>Find</li> <li>Zoom In</li> <li>Reset Zoom</li> <li>Zoom Out</li> <li>Download Log (semi-redundant since the log is loaded locally)</li> <li>Exit to Main Menu</li> </ul> <p>Note</p> <p>KevinbotLib Log Viewer is powered by QtWebEngine, which is licensed under the GPLv3, and is based on Chromium.</p>"},{"location":"cli/","title":"Command Line Tools","text":"<p>The KevinbotLib command-line tools are automatically installed using <code>pip</code>.</p>"},{"location":"cli/#apps-group","title":"<code>apps</code> (Group)","text":"<p>The apps group contains all KevinbotLib graphical utilities.</p>"},{"location":"cli/#apps-console","title":"<code>apps console</code>","text":"<p>KevinbotLib Control Console can be launched with the below command:</p> <pre><code>kevinbotlib apps console\n</code></pre>"},{"location":"cli/#options","title":"Options","text":"<ul> <li> <p> Verbose Logging</p> <p><code>-v</code> or <code>--verbose</code>: Enables verbose-level logging</p> </li> <li> <p> Trace Logging</p> <p><code>-t</code> or <code>--trace</code>: Enables trace-level logging</p> </li> <li> <p> Disable Screen Lock Inhibit</p> <p><code>--no-lock</code>: Disables the screen lock inhibitor when running the console</p> </li> </ul>"},{"location":"cli/#apps-dashboard","title":"<code>apps dashboard</code>","text":"<p>KevinbotLib Dashboard can be launched with the below command:</p> <pre><code>kevinbotlib apps dashboard\n</code></pre>"},{"location":"cli/#options_1","title":"Options","text":"<ul> <li> <p> Verbose Logging</p> <p><code>-v</code> or <code>--verbose</code>: Enables verbose-level logging</p> </li> <li> <p> Trace Logging</p> <p><code>-t</code> or <code>--trace</code>: Enables trace-level logging</p> </li> </ul>"},{"location":"cli/#apps-logdownloader","title":"<code>apps logdownloader</code>","text":"<p>KevinbotLib Log Downloader can be launched with the below command:</p> <pre><code>kevinbotlib apps logdownloader\n</code></pre>"},{"location":"cli/#options_2","title":"Options","text":"<ul> <li> <p> Verbose Logging</p> <p><code>-v</code> or <code>--verbose</code>: Enables verbose-level logging</p> </li> <li> <p> Trace Logging</p> <p><code>-t</code> or <code>--trace</code>: Enables trace-level logging</p> </li> </ul>"},{"location":"cli/#apps-logviewer","title":"<code>apps logviewer</code>","text":"<p>KevinbotLib Log Viewer can be launched with the below command:</p> <pre><code>kevinbotlib apps logviewer\n</code></pre>"},{"location":"cli/#options_3","title":"Options","text":"<ul> <li> <p> Verbose Logging</p> <p><code>-v</code> or <code>--verbose</code>: Enables verbose-level logging</p> </li> <li> <p> Trace Logging</p> <p><code>-t</code> or <code>--trace</code>: Enables trace-level logging</p> </li> </ul>"},{"location":"cli/#fileserver","title":"<code>fileserver</code>","text":"<p>The KevinbotLib File Server can be launched using the following command:</p> <pre><code>kevinbotlib fileserver\n</code></pre>"},{"location":"cli/#options_4","title":"Options","text":"<ul> <li> <p> Verbose Logging</p> <p><code>-v</code> or <code>--verbose</code>: Enables verbose-level logging</p> </li> <li> <p> Trace Logging</p> <p><code>-t</code> or <code>--trace</code>: Enables trace-level logging</p> </li> <li> <p> Directory</p> <p><code>-d</code> or <code>--dir</code>: Sets the directory for the file server. Defaults to the current working directory.</p> </li> <li> <p> Server Port</p> <p><code>-d</code> or <code>--dir</code>: Sets the port to serve on. Defaults to <code>8000</code>.</p> </li> <li> <p> Server Host</p> <p><code>-d</code> or <code>--dir</code>: Sets the host to serve on. Defaults to <code>localhost</code>.</p> </li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>All examples can be found on the project's GitHub repo.</p> <ul> <li> <p> Robot Examples</p> <p>View examples using KevinbotLib's Advanced Robot Control System</p> <p> View Examples</p> </li> <li> <p> Communication Examples</p> <p>View examples using KevinbotLib's Redis communication system</p> <p> View Examples</p> </li> <li> <p> Logging Examples</p> <p>View examples using KevinbotLib's logging system</p> <p> View Examples</p> </li> <li> <p> Joystick Examples</p> <p>View examples using KevinbotLib's SDL2 based game controller access and streaming system</p> <p> View Examples</p> </li> <li> <p> System Examples</p> <p>View examples using KevinbotLib's system data API</p> <p> View Examples</p> </li> <li> <p> File Server Examples</p> <p>View examples using KevinbotLib's file server</p> <p> View Examples</p> </li> <li> <p> Hardware Interface Examples</p> <p>View examples using KevinbotLib's low-level hardware interfaces</p> <p> View Examples</p> </li> <li> <p> Hardware Controller Examples</p> <p>View examples using KevinbotLib's low-level hardware interface protocols</p> <p> View Examples</p> </li> <li> <p> Command Scheduler Examples</p> <p>View examples using KevinbotLib's Command Scheduler</p> <p> View Examples</p> </li> </ul>"},{"location":"examples/comm/","title":"Communication Examples","text":""},{"location":"examples/comm/#setter","title":"Setter","text":"examples/comm/setter.py<pre><code>import time\n\nfrom kevinbotlib.comm import IntegerSendable, RedisCommClient, StringSendable\nfrom kevinbotlib.logger import Logger, LoggerConfiguration\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration())\n\nclient = RedisCommClient()\nclient.connect()\nclient.wait_until_connected()\n\ni = 0\ntry:\n    while True:\n        client.set(\"example/hierarchy/test\", IntegerSendable(value=i))\n        client.set(\"example/hierarchy/test2\", StringSendable(value=f\"demo {i}\"))\n        time.sleep(0.5)\n        i += 1\nexcept KeyboardInterrupt:\n    client.close()\n</code></pre>"},{"location":"examples/comm/#getter","title":"Getter","text":"examples/comm/getter.py<pre><code>import time\n\nfrom kevinbotlib.comm import IntegerSendable, RedisCommClient, StringSendable\nfrom kevinbotlib.logger import Logger, LoggerConfiguration\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration())\n\nclient = RedisCommClient()\nclient.connect()\nclient.wait_until_connected()\n\ntry:\n    while True:\n        print(client.get(\"example/hierarchy/test\", IntegerSendable))\n        print(client.get(\"example/hierarchy/test2\", StringSendable))\n        time.sleep(0.1)\nexcept KeyboardInterrupt:\n    client.close()\n</code></pre>"},{"location":"examples/comm/#getter-with-hooks","title":"Getter with Hooks","text":"examples/comm/getter_hooks.py<pre><code>import time\n\nfrom kevinbotlib.comm import IntegerSendable, RedisCommClient\nfrom kevinbotlib.logger import Logger, LoggerConfiguration\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration())\n\nclient = RedisCommClient()\nclient.connect()\nclient.wait_until_connected()\n\n\ndef hook(key, message) -&gt; None:\n    print(f\"Received message from {key}: {message}\")\n\n\nclient.add_hook(\"example/hierarchy/test\", IntegerSendable, hook)\n\ntry:\n    while True:\n        time.sleep(0.1)\nexcept KeyboardInterrupt:\n    client.close()\n</code></pre>"},{"location":"examples/comm/#sendable-generator","title":"Sendable Generator","text":"examples/comm/sendable_generator.py<pre><code>import random\nimport time\n\nfrom kevinbotlib.comm import (\n    BaseSendable,\n    IntegerSendable,\n    RedisCommClient,\n    SendableGenerator,\n)\nfrom kevinbotlib.logger import Logger, LoggerConfiguration\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration())\n\nclient = RedisCommClient()\nclient.connect()\nclient.wait_until_connected()\n\n\nclass TestGenerator(SendableGenerator):\n    def generate_sendable(self) -&gt; BaseSendable:\n        return IntegerSendable(value=random.randint(0, 100))\n\n\ngenerator = TestGenerator()\n\ntry:\n    while True:\n        client.set(\"example/hierarchy/test\", generator)\n        time.sleep(0.5)\nexcept KeyboardInterrupt:\n    client.close()\n</code></pre>"},{"location":"examples/fileserver/","title":"Fileserver Examples","text":""},{"location":"examples/fileserver/#basic-server","title":"Basic Server","text":"examples/fileserver/serve.py<pre><code>import time\n\nfrom kevinbotlib.fileserver import FileServer\nfrom kevinbotlib.logger import Logger, LoggerConfiguration\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration())\n\nserver = FileServer(\n    http_port=8000,  # http\n    directory=\"./\",  # serve directory\n)\n\ntry:\n    server.start()\n\n    while True:\n        time.sleep(1)\nexcept KeyboardInterrupt:\n    server.stop()\n</code></pre>"},{"location":"examples/hardwarecontroller/","title":"Hardware Controller Examples","text":""},{"location":"examples/hardwarecontroller/#serial-raw-keyvalue-protocol-example","title":"Serial Raw Key/Value Protocol Example","text":"<p>Example</p> <p></p> <p>This example requires a serial device responding to commands to be connected.</p> <p>You can make one using the Key/Value Test Gadget</p> <p>The test gadget can be flashed to most PlatformIO compatible devices.</p> examples/hardware/serial_kv_controller.py<pre><code>import time\n\nfrom kevinbotlib.hardware.controllers.keyvalue import RawKeyValueSerialController\nfrom kevinbotlib.hardware.interfaces.serial import RawSerialInterface\n\n# ! remember to change these settings for your testing environment\ninterface = RawSerialInterface(\n    \"/dev/ttyUSB0\", 9600, timeout=1\n)  # a timeout is useful to not stall at `controller.read_next()`\n\ncontroller = RawKeyValueSerialController(interface, b\"=\", b\"\\n\")\n\nwhile True:\n    print(\"Sending data\")\n    controller.write(b\"test\", b\"1\")\n\n    pair = controller.read()\n    if pair:\n        print(\"Got data:\", pair)\n    else:\n        print(\"Serial interface timeout\")\n\n    time.sleep(1)\n</code></pre> <ol> <li> <p>Arduino Nano image modified from an original image by MakeMagazinDE, licensed under CC BY-SA 4.0 (link).\u00a0\u21a9</p> </li> </ol>"},{"location":"examples/hardwareinterface/","title":"Hardware Interface Examples","text":""},{"location":"examples/hardwareinterface/#serial-hardware-query-example","title":"Serial Hardware Query Example","text":"examples/hardware/serial_query.py<pre><code>from pprint import pprint\n\nfrom kevinbotlib.hardware.interfaces.serial import SerialIdentification\n\npprint(SerialIdentification.list_device_info())\n</code></pre>"},{"location":"examples/hardwareinterface/#serial-raw-pingpong-example","title":"Serial Raw Ping/Pong Example","text":"<p>Example</p> <p></p> <p>This example requires a serial device responding to pings to be connected.</p> <p>You can make one using the Ping Pong Test Gadget</p> <p>The test gadget can be flashed to most PlatformIO compatible devices.</p> examples/hardware/serial_raw_ping_pong.py<pre><code>import time\n\nfrom kevinbotlib.hardware.interfaces.serial import RawSerialInterface\n\n# ! remember to change these settings for your testing environment\ngadget = RawSerialInterface(\"/dev/ttyUSB0\", 9600)\n# gadget.open() # * not needed if a port is provided above ^\n\nwhile True:\n    gadget.write(b\"ping\\n\")\n    print(\"Sent ping, waiting for pong...\")\n\n    while True:\n        line = gadget.readline().decode(\"utf-8\").rstrip()\n        if line == \"pong\":\n            print(\"Got pong\")\n            break\n\n    time.sleep(1)\n</code></pre> <ol> <li> <p>Arduino Nano image modified from an original image by MakeMagazinDE, licensed under CC BY-SA 4.0 (link).\u00a0\u21a9</p> </li> </ol>"},{"location":"examples/joystick/","title":"Joystick Examples","text":""},{"location":"examples/joystick/#local-controller-query","title":"Local Controller Query","text":"examples/joystick/local_query.py<pre><code>import time\n\nfrom kevinbotlib.joystick import LocalJoystickIdentifiers\n\nwhile True:\n    count = LocalJoystickIdentifiers.get_count()\n    names = LocalJoystickIdentifiers.get_names()\n    guids = LocalJoystickIdentifiers.get_guids()\n    print(f\"{count} joysticks present\")\n    print(f\"Joystick Names: {names}\")\n    print(f\"Joystick GUIDs: {guids}\")\n    time.sleep(1)\n</code></pre>"},{"location":"examples/joystick/#local-raw-polling","title":"Local Raw Polling","text":"examples/joystick/local_polling.py<pre><code>import time\n\nfrom kevinbotlib.joystick import RawLocalJoystickDevice\nfrom kevinbotlib.logger import Logger, LoggerConfiguration\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration())\n\ncontroller = RawLocalJoystickDevice(0)\ncontroller.start_polling()\n\ntry:\n    while True:\n        print(\"Buttons:\", controller.get_buttons())\n        print(\"POV:\", controller.get_pov_direction())\n        print(\"Axes:\", controller.get_axes())\n        time.sleep(0.1)\nexcept KeyboardInterrupt:\n    controller.stop()\n</code></pre>"},{"location":"examples/joystick/#local-named-polling","title":"Local Named Polling","text":"examples/joystick/local_named_polling.py<pre><code>import time\n\nfrom kevinbotlib.joystick import LocalNamedController\nfrom kevinbotlib.logger import Logger, LoggerConfiguration\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration())\n\ncontroller = LocalNamedController(0)\ncontroller.start_polling()\n\ntry:\n    while True:\n        print(\"Held buttons:\", [btn.name for btn in controller.get_buttons()])\n        print(\"POV Direction:\", controller.get_pov_direction())\n        print(\"Trigger Values:\", controller.get_triggers())\n        print(\"Left Stick Values:\", controller.get_left_stick())\n        print(\"Right Stick Values:\", controller.get_right_stick())\n        time.sleep(0.1)\nexcept KeyboardInterrupt:\n    controller.stop()\n</code></pre>"},{"location":"examples/joystick/#sending-joystick-data-with-a-rediscommclient","title":"Sending Joystick Data with a <code>RedisCommClient</code>","text":"examples/joystick/sender.py<pre><code>import time\n\nfrom kevinbotlib.comm import RedisCommClient\nfrom kevinbotlib.joystick import JoystickSender, LocalNamedController\nfrom kevinbotlib.logger import Logger, LoggerConfiguration\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration())\n\ncontroller = LocalNamedController(\n    0\n)  # it doesn't matter what type of controller is being sent - all values will be converted to raw anyway\ncontroller.start_polling()\n\nclient = RedisCommClient()\nclient.connect()\nclient.wait_until_connected()\n\nsender = JoystickSender(client, controller, \"joysticks/0\")\nsender.start()\n\nwhile True:\n    time.sleep(1)\n</code></pre>"},{"location":"examples/joystick/#receiving-raw-joystick-data-with-a-rediscommclient","title":"Receiving Raw Joystick Data with a <code>RedisCommClient</code>","text":"examples/joystick/rx_raw.py<pre><code>import time\n\nfrom kevinbotlib.comm import RedisCommClient\nfrom kevinbotlib.joystick import RemoteRawJoystickDevice\nfrom kevinbotlib.logger import Logger, LoggerConfiguration\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration())\n\nclient = RedisCommClient()\nclient.connect()\nclient.wait_until_connected()\n\ncontroller = RemoteRawJoystickDevice(client, \"joysticks/0\")\ncontroller.start_polling()\n\ntry:\n    while True:\n        print(\"Buttons:\", controller.get_buttons())\n        print(\"POV:\", controller.get_pov_direction())\n        print(\"Axes:\", controller.get_axes())\n        print(\"Connected:\", controller.is_connected())\n        time.sleep(0.1)\nexcept KeyboardInterrupt:\n    controller.stop()\n</code></pre>"},{"location":"examples/joystick/#receiving-named-joystick-data-with-a-rediscommclient","title":"Receiving Named Joystick Data with a <code>RedisCommClient</code>","text":"examples/joystick/rx_named.py<pre><code>import time\n\nfrom kevinbotlib.comm import RedisCommClient\nfrom kevinbotlib.joystick import RemoteNamedController\nfrom kevinbotlib.logger import Logger, LoggerConfiguration\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration())\n\nclient = RedisCommClient()\nclient.connect()\nclient.wait_until_connected()\n\ncontroller = RemoteNamedController(client, \"joysticks/0\")\ncontroller.start_polling()\n\ntry:\n    while True:\n        print(\"Buttons:\", controller.get_buttons())\n        print(\"POV:\", controller.get_pov_direction())\n        print(\"Trigger Values:\", controller.get_triggers())\n        print(\"Left Stick Values:\", controller.get_left_stick())\n        print(\"Right Stick Values:\", controller.get_right_stick())\n        print(\"Connected:\", controller.is_connected())\n        time.sleep(0.1)\nexcept KeyboardInterrupt:\n    controller.stop()\n</code></pre>"},{"location":"examples/logger/","title":"Logging Examples","text":""},{"location":"examples/logger/#logging-levels","title":"Logging Levels","text":"examples/logger/logger_levels.py<pre><code>from kevinbotlib.logger import Level, Logger, LoggerConfiguration\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration(Level.TRACE))  # lowest available level\n\nlogger.trace(\"A trace message\")\nlogger.debug(\"A debug message\")\nlogger.info(\"An info message\")\nlogger.warning(\"A warning message\")\nlogger.error(\"An error message\")\nlogger.security(\"A secutity warning or error\")\nlogger.critical(\"A critical message\")\n</code></pre>"},{"location":"examples/logger/#file-logger","title":"File Logger","text":"examples/logger/file_logger.py<pre><code>import time\n\nfrom kevinbotlib.fileserver import FileServer\nfrom kevinbotlib.logger import (\n    FileLoggerConfig,\n    Level,\n    Logger,\n    LoggerConfiguration,\n    LoggerDirectories,\n)\n\nprint(f\"Logging to {LoggerDirectories.get_logger_directory()}\")\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration(Level.DEBUG, FileLoggerConfig()))\n\nfileserver = FileServer(LoggerDirectories.get_logger_directory())\nfileserver.start()\n\nLoggerDirectories.cleanup_logs(LoggerDirectories.get_logger_directory())\n\nlogger.trace(\"A trace message\")\nlogger.debug(\"A debug message\")\nlogger.info(\"An info message\")\nlogger.warning(\"A warning message\")\nlogger.error(\"An error message\")\nlogger.critical(\"A critical message\")\n\nwhile True:\n    time.sleep(1)  # keep the fileserver up\n</code></pre>"},{"location":"examples/logger/#stdout-redirector","title":"Stdout Redirector","text":"examples/logger/stdout_redirector.py<pre><code>import contextlib\n\nfrom kevinbotlib.logger import Level, Logger, LoggerConfiguration, StreamRedirector\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration(Level.DEBUG))\nstream = StreamRedirector(logger)\n\nwith contextlib.redirect_stdout(stream):\n    print(\"Hello from KevinbotLib!\")\n    print(\"This will be converted to a logging entry\")\n</code></pre>"},{"location":"examples/logger/#log-suppressor","title":"Log Suppressor","text":"examples/logger/logger_suppress.py<pre><code>from kevinbotlib.logger import Level, Logger, LoggerConfiguration\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration(Level.TRACE))  # lowest available level\n\nwith Logger.suppress():\n    Logger().error(\"You shouldn't see this!\")\n\nLogger().error(\"You should see this!\")\n</code></pre>"},{"location":"examples/robot/","title":"Robot Examples","text":""},{"location":"examples/robot/#robot-controller","title":"Robot Controller","text":"examples/robot/robot.py<pre><code>from kevinbotlib.logger import Level\nfrom kevinbotlib.robot import BaseRobot\n\n\nclass DemoRobot(BaseRobot):\n    def __init__(self):\n        super().__init__(\n            opmodes=[\n                \"TestOp1\",\n                \"TestOp2\",\n                \"TestOp3\",\n                \"TestOp4\",\n            ],  # robot's operational modes\n            log_level=Level.TRACE,  # lowset logging level\n            enable_stderr_logger=True,\n            cycle_time=20,  # loop our robot code 20x per second - it is recommended to run much higher in practice\n            metrics_publish_timer=0,  # the test robot doesn't use metrics - see the metrics_robot.py example for a metrics usage example\n        )\n\n    def robot_start(self) -&gt; None:  # runs once as the robot starts\n        super().robot_start()\n        print(\n            \"Starting robot...\"\n        )  # print statements are redirected to the KevinbotLib logging system - please don't do this in production\n\n    def robot_periodic(self, opmode: str, enabled: bool) -&gt; None:\n        super().robot_periodic(opmode, enabled)\n\n        print(f\"OpMode {'enabled' if enabled else 'disabled'}... {opmode}\")\n\n    def opmode_init(self, opmode: str, enabled: bool) -&gt; None:\n        super().opmode_init(opmode, enabled)\n\n        print(f\"OpMode {'enabled' if enabled else 'disabled'} init... {opmode}\")\n\n    def opmode_exit(self, opmode: str, enabled: bool) -&gt; None:\n        super().opmode_exit(opmode, enabled)\n\n        print(f\"OpMode {'enabled' if enabled else 'disabled'} exit... {opmode}\")\n\n    def robot_end(self) -&gt; None:  # runs as the robot propares to shutdown\n        super().robot_end()\n        print(\"Ending robot...\")\n\n\nif __name__ == \"__main__\":\n    DemoRobot().run()\n</code></pre>"},{"location":"examples/robot/#robot-emergency-stop","title":"Robot Emergency Stop","text":"examples/robot/estop_robot.py<pre><code>from kevinbotlib.logger import Level\nfrom kevinbotlib.robot import BaseRobot\n\n\nclass DemoRobot(BaseRobot):\n    def __init__(self):\n        super().__init__(\n            opmodes=[\n                \"TestOp1\",\n            ],  # robot's operational modes\n            log_level=Level.TRACE,  # lowset logging level\n            enable_stderr_logger=True,\n            cycle_time=20,  # loop our robot code 20x per second - it is recommended to run much higher in practice\n            metrics_publish_timer=0,  # the test robot doesn't use metrics - see the metrics_robot.py example for a metrics usage example\n        )\n\n        BaseRobot.register_estop_hook(lambda: print(\"E-STOP Hook 1\"))  # usually used for hardware shutdowns\n        BaseRobot.register_estop_hook(\n            lambda: print(\"E-STOP Hook 2\")\n        )  # they will run in a thread - *MUST BE THREAD-SAFE*\n\n    def robot_start(self) -&gt; None:  # runs once as the robot starts\n        super().robot_start()\n        print(\n            \"Starting robot...\"\n        )  # print statements are redirected to the KevinbotLib logging system - please don't do this in production\n\n        self.estop()\n\n    def robot_periodic(self, opmode: str, enabled: bool) -&gt; None:\n        super().robot_periodic(opmode, enabled)\n\n        print(f\"OpMode {'enabled' if enabled else 'disabled'}... {opmode}\")\n\n    def opmode_init(self, opmode: str, enabled: bool) -&gt; None:\n        super().opmode_init(opmode, enabled)\n\n        print(f\"OpMode {'enabled' if enabled else 'disabled'} init... {opmode}\")\n\n    def opmode_exit(self, opmode: str, enabled: bool) -&gt; None:\n        super().opmode_exit(opmode, enabled)\n\n        print(f\"OpMode {'enabled' if enabled else 'disabled'} exit... {opmode}\")\n\n    def robot_end(self) -&gt; None:  # runs as the robot propares to shutdown\n        super().robot_end()\n        print(\"Ending robot...\")\n\n\nif __name__ == \"__main__\":\n    DemoRobot().run()\n</code></pre>"},{"location":"examples/robot/#robot-controller-with-metrics-publishing","title":"Robot Controller with Metrics Publishing","text":"examples/robot/metrics_robot.py<pre><code>from kevinbotlib.logger import Level\nfrom kevinbotlib.robot import BaseRobot\n\n\nclass DemoRobot(BaseRobot):\n    def __init__(self):\n        super().__init__(\n            opmodes=[\n                \"TestMetricsRobot\",\n            ],  # robot's operational modes\n            log_level=Level.TRACE,  # lowest logging level\n            enable_stderr_logger=True,\n            cycle_time=5,  # loop our robot code 5x per second - it is recommended to run much higher in practice\n            metrics_publish_timer=5.0,  # how often to publish new system metrics to the control console\n        )\n        BaseRobot.add_basic_metrics(self, update_interval=2.0)  # how fast to get new metrics internally\n\n    def robot_start(self) -&gt; None:  # runs once as the robot starts\n        super().robot_start()\n        print(\n            \"Starting robot...\"\n        )  # print statements are redirected to the KevinbotLib logging system - please don't do this in production\n\n    def robot_periodic(self, opmode: str, enabled: bool) -&gt; None:\n        super().robot_periodic(opmode, enabled)\n\n        print(self.metrics.getall())\n\n    def opmode_init(self, opmode: str, enabled: bool) -&gt; None:\n        super().opmode_init(opmode, enabled)\n\n        print(f\"OpMode {'enabled' if enabled else 'disabled'} init... {opmode}\")\n\n    def opmode_exit(self, opmode: str, enabled: bool) -&gt; None:\n        super().opmode_exit(opmode, enabled)\n\n        print(f\"OpMode {'enabled' if enabled else 'disabled'} exit... {opmode}\")\n\n    def robot_end(self) -&gt; None:  # runs as the robot propares to shutdown\n        super().robot_end()\n        print(\"Ending robot...\")\n\n\nif __name__ == \"__main__\":\n    DemoRobot().run()\n</code></pre>"},{"location":"examples/robot/#robot-controller-with-joystick-listening","title":"Robot Controller with Joystick Listening","text":"examples/robot/joystick_robot.py<pre><code>from kevinbotlib.joystick import RemoteNamedController\nfrom kevinbotlib.logger import Level\nfrom kevinbotlib.robot import BaseRobot\n\n\nclass DemoRobot(BaseRobot):\n    def __init__(self):\n        super().__init__(\n            opmodes=[\n                \"TestOp1\",\n            ],  # robot's operational modes\n            log_level=Level.TRACE,  # lowset logging level\n            enable_stderr_logger=True,\n            cycle_time=20,  # loop our robot code 20x per second - it is recommended to run much higher in practice\n            metrics_publish_timer=0,  # the test robot doesn't use metrics - see the metrics_robot.py example for a metrics usage example\n        )\n\n        self.joystick1 = RemoteNamedController(self.comm_client, \"%ControlConsole/joystick/0\")\n\n    def robot_start(self) -&gt; None:  # runs once as the robot starts\n        super().robot_start()\n        print(\n            \"Starting robot...\"\n        )  # print statements are redirected to the KevinbotLib logging system - please don't do this in production\n\n    def robot_periodic(self, opmode: str, enabled: bool) -&gt; None:\n        super().robot_periodic(opmode, enabled)\n\n        print(f\"OpMode {'enabled' if enabled else 'disabled'}... {opmode}\")\n        print(self.joystick1.is_connected())\n        print(self.joystick1.get_buttons())\n\n    def opmode_init(self, opmode: str, enabled: bool) -&gt; None:\n        super().opmode_init(opmode, enabled)\n\n        print(f\"OpMode {'enabled' if enabled else 'disabled'} init... {opmode}\")\n\n    def opmode_exit(self, opmode: str, enabled: bool) -&gt; None:\n        super().opmode_exit(opmode, enabled)\n\n        print(f\"OpMode {'enabled' if enabled else 'disabled'} exit... {opmode}\")\n\n    def robot_end(self) -&gt; None:  # runs as the robot propares to shutdown\n        super().robot_end()\n        print(\"Ending robot...\")\n\n\nif __name__ == \"__main__\":\n    DemoRobot().run()\n</code></pre>"},{"location":"examples/robot/#dynamic-state-changes","title":"Dynamic State Changes","text":"examples/robot/dynamic_robot.py<pre><code>from kevinbotlib.logger import Level\nfrom kevinbotlib.robot import BaseRobot\n\n\nclass DemoRobot(BaseRobot):\n    def __init__(self):\n        super().__init__(\n            opmodes=[\n                \"OpModeThatWillEnable\",\n                \"OpModeThatWillDisable\",\n                \"OpModeThatWillEStop\",\n                \"OpModeThatWill1stOpMode\",\n            ],  # robot's operational modes\n            log_level=Level.TRACE,  # lowset logging level\n            enable_stderr_logger=True,\n            cycle_time=20,  # loop our robot code 20x per second - it is recommended to run much higher in practice\n            metrics_publish_timer=0,  # the test robot doesn't use metrics - see the metrics_robot.py example for a metrics usage example\n            allow_enable_without_console=True,  # * allow the robot to enable without the prescence of a control console\n        )\n\n    def robot_start(self) -&gt; None:  # runs once as the robot starts\n        super().robot_start()\n        print(\n            \"Starting robot...\"\n        )  # print statements are redirected to the KevinbotLib logging system - please don't do this in production\n\n    def robot_periodic(self, opmode: str, enabled: bool) -&gt; None:\n        super().robot_periodic(opmode, enabled)\n\n        print(f\"OpMode {'enabled' if enabled else 'disabled'}... {opmode}\")\n\n    def opmode_init(self, opmode: str, enabled: bool) -&gt; None:\n        super().opmode_init(opmode, enabled)\n\n        print(f\"OpMode {'enabled' if enabled else 'disabled'} init... {opmode}\")\n\n        if opmode == \"OpModeThatWillEnable\":\n            self.enabled = True\n\n        if opmode == \"OpModeThatWillDisable\":\n            self.enabled = False\n\n        if opmode == \"OpModeThatWillEStop\":\n            self.estop()\n\n        if opmode == \"OpModeThatWill1stOpMode\":\n            self.opmode = self.opmodes[0]\n\n    def opmode_exit(self, opmode: str, enabled: bool) -&gt; None:\n        super().opmode_exit(opmode, enabled)\n\n        print(f\"OpMode {'enabled' if enabled else 'disabled'} exit... {opmode}\")\n\n    def robot_end(self) -&gt; None:  # runs as the robot propares to shutdown\n        super().robot_end()\n        print(\"Ending robot...\")\n\n\nif __name__ == \"__main__\":\n    DemoRobot().run()\n</code></pre>"},{"location":"examples/robot/#robot-controller-using-redis-comms","title":"Robot Controller using Redis Comms","text":"examples/robot/comms_robot.py<pre><code>from kevinbotlib.comm import (\n    AnyListSendable,\n    BooleanSendable,\n    FloatSendable,\n    IntegerSendable,\n    StringSendable,\n)\nfrom kevinbotlib.logger import Level\nfrom kevinbotlib.robot import BaseRobot\n\n\nclass DemoRobot(BaseRobot):\n    def __init__(self):\n        super().__init__(\n            opmodes=[\n                \"TestOp1\",\n                \"TestOp2\",\n                \"TestOp3\",\n                \"TestOp4\",\n            ],  # robot's operational modes\n            log_level=Level.TRACE,  # lowset logging level\n            enable_stderr_logger=True,\n            cycle_time=20,  # loop our robot code 20x per second - it is recommended to run much higher in practice\n            metrics_publish_timer=0,  # the test robot doesn't use metrics - see the metrics_robot.py example for a metrics usage example\n        )\n\n    def robot_start(self) -&gt; None:  # runs once as the robot starts\n        super().robot_start()\n        print(\n            \"Starting robot...\"\n        )  # print statements are redirected to the KevinbotLib logging system - please don't do this in production\n\n        self.comm_client.set(\"example/string\", StringSendable(value=\"Hello World!\"))\n        self.comm_client.set(\"example/integer\", IntegerSendable(value=1234))\n        self.comm_client.set(\"example/float\", FloatSendable(value=1234.56))\n        self.comm_client.set(\"example/list\", AnyListSendable(value=[1, 2, 3, 4]))\n        self.comm_client.set(\"example/boolean\", BooleanSendable(value=True))\n\n\nif __name__ == \"__main__\":\n    DemoRobot().run()\n</code></pre>"},{"location":"examples/scheduler/","title":"Command Scheduler Examples","text":""},{"location":"examples/scheduler/#basic-usage","title":"Basic Usage","text":"examples/scheduler/basic_example.py<pre><code>from kevinbotlib.scheduler import Command, CommandScheduler\n\n\nclass PrintCommand(Command):\n    def __init__(self, message: str):\n        self.message = message\n        self._finished = False\n\n    def init(self):\n        print(f\"Initializing: {self.message}\")\n\n    def execute(self):\n        print(self.message)\n        self._finished = True\n\n    def end(self):\n        print(f\"Ending: {self.message}\")\n\n    def finished(self):\n        return self._finished\n\n\nscheduler = CommandScheduler()\nscheduler.schedule(PrintCommand(\"Test\"))\nscheduler.schedule(PrintCommand(\"Test2\"))\nscheduler.iterate()\n</code></pre>"},{"location":"examples/scheduler/#parallel-commands","title":"Parallel Commands","text":"examples/scheduler/parallel.py<pre><code>import time\n\nfrom kevinbotlib.scheduler import Command, CommandScheduler, ParallelCommand\n\n\nclass PrintForOneSecondCommand(Command):\n    def __init__(self, message: str):\n        self.message = message\n        self._finished = False\n        self.start = time.time()\n\n    def init(self):\n        self.start = time.time()\n        print(f\"Initializing: {self.message}\")\n\n    def execute(self):\n        print(self.message)\n\n    def end(self):\n        print(f\"Ending: {self.message}\")\n\n    def finished(self):\n        return time.time() &gt; self.start + 1\n\n\nstart_time = time.time()\n\n\nscheduler = CommandScheduler()\nscheduler.schedule(ParallelCommand([PrintForOneSecondCommand(\"command 1\"), PrintForOneSecondCommand(\"command 2\")]))\n\nwhile True:\n    scheduler.iterate()\n    time.sleep(0.1)\n</code></pre>"},{"location":"examples/scheduler/#sequential-commands","title":"Sequential Commands","text":"examples/scheduler/sequential.py<pre><code>import time\n\nfrom kevinbotlib.scheduler import Command, CommandScheduler, SequentialCommand\n\n\nclass PrintForOneSecondCommand(Command):\n    def __init__(self, message: str):\n        self.message = message\n        self._finished = False\n        self.start = time.time()\n\n    def init(self):\n        self.start = time.time()\n        print(f\"Initializing: {self.message}\")\n\n    def execute(self):\n        print(self.message)\n\n    def end(self):\n        print(f\"Ending: {self.message}\")\n\n    def finished(self):\n        return time.time() &gt; self.start + 1\n\n\nstart_time = time.time()\n\n\nscheduler = CommandScheduler()\nscheduler.schedule(SequentialCommand([PrintForOneSecondCommand(\"command 1\"), PrintForOneSecondCommand(\"command 2\")]))\n\nwhile True:\n    scheduler.iterate()\n    time.sleep(0.1)\n</code></pre>"},{"location":"examples/scheduler/#named-controller-command-trigger","title":"Named Controller Command Trigger","text":"examples/scheduler/joystick_trigger.py<pre><code>import time\n\nfrom kevinbotlib.joystick import LocalNamedController, NamedControllerButtons\nfrom kevinbotlib.logger import Logger, LoggerConfiguration\nfrom kevinbotlib.scheduler import Command, CommandScheduler, Trigger\n\nlogger = Logger()\nlogger.configure(LoggerConfiguration())\n\n\nclass PrintCommand(Command):\n    def __init__(self, message: str):\n        self.message = message\n        self._finished = False\n\n    def init(self):\n        print(f\"Initializing: {self.message}\")\n\n    def execute(self):\n        print(self.message)\n        self._finished = True\n\n    def end(self):\n        print(f\"Ending: {self.message}\")\n\n    def finished(self):\n        return self._finished\n\n\nclass PrintForOneSecondCommand(Command):\n    def __init__(self, message: str):\n        self.message = message\n        self._finished = False\n        self.start = time.time()\n\n    def init(self):\n        self.start = time.time()\n        print(f\"Initializing: {self.message}\")\n\n    def execute(self):\n        print(self.message)\n\n    def end(self):\n        print(f\"Ending: {self.message}\")\n\n    def finished(self):\n        return time.time() &gt; self.start + 1\n\n\nstart_time = time.time()\n\n\nscheduler = CommandScheduler()\n\ncontroller = LocalNamedController(0)\ncontroller.start_polling()\n\nTrigger(lambda: NamedControllerButtons.A in controller.get_buttons(), scheduler).while_true(\n    PrintForOneSecondCommand(\"A Button Command\")\n)\nTrigger(lambda: NamedControllerButtons.B in controller.get_buttons(), scheduler).on_true(\n    PrintForOneSecondCommand(\"B Button Command\")\n)\nTrigger(lambda: NamedControllerButtons.X in controller.get_buttons(), scheduler).on_true(\n    PrintCommand(\"X Button Command\")\n)\n\nwhile True:\n    scheduler.iterate()\n    time.sleep(0.1)\n</code></pre>"},{"location":"examples/system/","title":"System Examples","text":""},{"location":"examples/system/#performance-data","title":"Performance Data","text":"examples/system/perfdata.py<pre><code>from kevinbotlib.system import SystemPerformanceData\n\ncpu = SystemPerformanceData.cpu()\nprint(\"CPU\")\nprint(cpu)\n\nmemory = SystemPerformanceData.memory()\nprint(\"\\nMemory\")\nprint(memory)\n\ndisks = SystemPerformanceData.disks()\nprint(\"\\nAll Disks\")\nprint(disks)\n\nprimary_disk = SystemPerformanceData.primary_disk()\nprint(\"\\nPrimary Disk\")\nprint(primary_disk)\n</code></pre>"},{"location":"reference/comm/","title":"Communications Reference","text":""},{"location":"reference/comm/#kevinbotlib.comm","title":"<code>kevinbotlib.comm</code>","text":""},{"location":"reference/comm/#kevinbotlib.comm.BaseSendable","title":"<code>kevinbotlib.comm.BaseSendable</code>","text":"<p>               Bases: <code>BaseModel</code>, <code>ABC</code></p> <p>The base for all of KevinbotLib's sendables.</p> <p>What is a sendable?</p> <p>A sendable is a basic unit of data that can be transported through the <code>RedisCommClient</code> and server</p>"},{"location":"reference/comm/#kevinbotlib.comm.BaseSendable.data_id","title":"<code>data_id = 'kevinbotlib.dtype.null'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Internally used to differentiate sendable types</p>"},{"location":"reference/comm/#kevinbotlib.comm.BaseSendable.struct","title":"<code>struct = {}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Data structure suggestion for use in dashboard applications</p>"},{"location":"reference/comm/#kevinbotlib.comm.BaseSendable.get_dict","title":"<code>get_dict()</code>","text":"<p>Return the sendable in dictionary form</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The sendable data</p>"},{"location":"reference/comm/#kevinbotlib.comm.SendableGenerator","title":"<code>kevinbotlib.comm.SendableGenerator</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for a function capable of being sent over <code>RedisCommClient</code></p>"},{"location":"reference/comm/#kevinbotlib.comm.SendableGenerator.generate_sendable","title":"<code>generate_sendable()</code>  <code>abstractmethod</code>","text":"<p>Abstract method to generate a sendable</p> <p>Returns:</p> Name Type Description <code>BaseSendable</code> <code>BaseSendable</code> <p>The returned sendable</p>"},{"location":"reference/comm/#kevinbotlib.comm.IntegerSendable","title":"<code>kevinbotlib.comm.IntegerSendable</code>","text":"<p>               Bases: <code>BaseSendable</code></p>"},{"location":"reference/comm/#kevinbotlib.comm.IntegerSendable.value","title":"<code>value</code>  <code>instance-attribute</code>","text":"<p>Value to send</p>"},{"location":"reference/comm/#kevinbotlib.comm.IntegerSendable.data_id","title":"<code>data_id = 'kevinbotlib.dtype.int'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Internally used to differentiate sendable types</p>"},{"location":"reference/comm/#kevinbotlib.comm.IntegerSendable.struct","title":"<code>struct = {'dashboard': [{'element': 'value', 'format': 'raw'}]}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Data structure suggestion for use in dashboard applications</p>"},{"location":"reference/comm/#kevinbotlib.comm.IntegerSendable.get_dict","title":"<code>get_dict()</code>","text":"<p>Return the sendable in dictionary form</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The sendable data</p>"},{"location":"reference/comm/#kevinbotlib.comm.BooleanSendable","title":"<code>kevinbotlib.comm.BooleanSendable</code>","text":"<p>               Bases: <code>BaseSendable</code></p>"},{"location":"reference/comm/#kevinbotlib.comm.BooleanSendable.value","title":"<code>value</code>  <code>instance-attribute</code>","text":"<p>Value to send</p>"},{"location":"reference/comm/#kevinbotlib.comm.BooleanSendable.data_id","title":"<code>data_id = 'kevinbotlib.dtype.bool'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Internally used to differentiate sendable types</p>"},{"location":"reference/comm/#kevinbotlib.comm.BooleanSendable.struct","title":"<code>struct = {'dashboard': [{'element': 'value', 'format': 'raw'}]}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Data structure suggestion for use in dashboard applications</p>"},{"location":"reference/comm/#kevinbotlib.comm.BooleanSendable.get_dict","title":"<code>get_dict()</code>","text":"<p>Return the sendable in dictionary form</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The sendable data</p>"},{"location":"reference/comm/#kevinbotlib.comm.StringSendable","title":"<code>kevinbotlib.comm.StringSendable</code>","text":"<p>               Bases: <code>BaseSendable</code></p>"},{"location":"reference/comm/#kevinbotlib.comm.StringSendable.value","title":"<code>value</code>  <code>instance-attribute</code>","text":"<p>Value to send</p>"},{"location":"reference/comm/#kevinbotlib.comm.StringSendable.data_id","title":"<code>data_id = 'kevinbotlib.dtype.str'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Internally used to differentiate sendable types</p>"},{"location":"reference/comm/#kevinbotlib.comm.StringSendable.struct","title":"<code>struct = {'dashboard': [{'element': 'value', 'format': 'raw'}]}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Data structure suggestion for use in dashboard applications</p>"},{"location":"reference/comm/#kevinbotlib.comm.StringSendable.get_dict","title":"<code>get_dict()</code>","text":"<p>Return the sendable in dictionary form</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The sendable data</p>"},{"location":"reference/comm/#kevinbotlib.comm.FloatSendable","title":"<code>kevinbotlib.comm.FloatSendable</code>","text":"<p>               Bases: <code>BaseSendable</code></p>"},{"location":"reference/comm/#kevinbotlib.comm.FloatSendable.value","title":"<code>value</code>  <code>instance-attribute</code>","text":"<p>Value to send</p>"},{"location":"reference/comm/#kevinbotlib.comm.FloatSendable.data_id","title":"<code>data_id = 'kevinbotlib.dtype.float'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Internally used to differentiate sendable types</p>"},{"location":"reference/comm/#kevinbotlib.comm.FloatSendable.struct","title":"<code>struct = {'dashboard': [{'element': 'value', 'format': 'raw'}]}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Data structure suggestion for use in dashboard applications</p>"},{"location":"reference/comm/#kevinbotlib.comm.FloatSendable.get_dict","title":"<code>get_dict()</code>","text":"<p>Return the sendable in dictionary form</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The sendable data</p>"},{"location":"reference/comm/#kevinbotlib.comm.AnyListSendable","title":"<code>kevinbotlib.comm.AnyListSendable</code>","text":"<p>               Bases: <code>BaseSendable</code></p>"},{"location":"reference/comm/#kevinbotlib.comm.AnyListSendable.value","title":"<code>value</code>  <code>instance-attribute</code>","text":"<p>Value to send</p>"},{"location":"reference/comm/#kevinbotlib.comm.AnyListSendable.data_id","title":"<code>data_id = 'kevinbotlib.dtype.list.any'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Internally used to differentiate sendable types</p>"},{"location":"reference/comm/#kevinbotlib.comm.AnyListSendable.struct","title":"<code>struct = {'dashboard': [{'element': 'value', 'format': 'raw'}]}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Data structure suggestion for use in dashboard applications</p>"},{"location":"reference/comm/#kevinbotlib.comm.AnyListSendable.get_dict","title":"<code>get_dict()</code>","text":"<p>Return the sendable in dictionary form</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The sendable data</p>"},{"location":"reference/comm/#kevinbotlib.comm.DictSendable","title":"<code>kevinbotlib.comm.DictSendable</code>","text":"<p>               Bases: <code>BaseSendable</code></p>"},{"location":"reference/comm/#kevinbotlib.comm.DictSendable.value","title":"<code>value</code>  <code>instance-attribute</code>","text":"<p>Value to send</p>"},{"location":"reference/comm/#kevinbotlib.comm.DictSendable.data_id","title":"<code>data_id = 'kevinbotlib.dtype.dict'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Internally used to differentiate sendable types</p>"},{"location":"reference/comm/#kevinbotlib.comm.DictSendable.struct","title":"<code>struct = {'dashboard': [{'element': 'value', 'format': 'raw'}]}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Data structure suggestion for use in dashboard applications</p>"},{"location":"reference/comm/#kevinbotlib.comm.DictSendable.get_dict","title":"<code>get_dict()</code>","text":"<p>Return the sendable in dictionary form</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The sendable data</p>"},{"location":"reference/comm/#kevinbotlib.comm.BinarySendable","title":"<code>kevinbotlib.comm.BinarySendable</code>","text":"<p>               Bases: <code>BaseSendable</code></p>"},{"location":"reference/comm/#kevinbotlib.comm.BinarySendable.value","title":"<code>value</code>  <code>instance-attribute</code>","text":"<p>Value to send</p>"},{"location":"reference/comm/#kevinbotlib.comm.BinarySendable.data_id","title":"<code>data_id = 'kevinbotlib.dtype.bin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Internally used to differentiate sendable types</p>"},{"location":"reference/comm/#kevinbotlib.comm.BinarySendable.struct","title":"<code>struct = {'dashboard': [{'element': 'value', 'format': 'limit:1024'}]}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Data structure suggestion for use in dashboard applications</p>"},{"location":"reference/comm/#kevinbotlib.comm.BinarySendable.get_dict","title":"<code>get_dict()</code>","text":"<p>Return the sendable in dictionary form</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The sendable data</p>"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient","title":"<code>kevinbotlib.comm.RedisCommClient</code>","text":""},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.__init__","title":"<code>__init__(host='localhost', port=6379, db=0, timeout=2, on_connect=None, on_disconnect=None)</code>","text":"<p>Initialize a Redis Communication Client.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Host of the Redis server.</p> <code>'localhost'</code> <code>port</code> <code>int</code> <p>Port of the Redis server.</p> <code>6379</code> <code>db</code> <code>int</code> <p>Database number to use.</p> <code>0</code> <code>timeout</code> <code>float</code> <p>Socket timeout in seconds.</p> <code>2</code> <code>on_connect</code> <code>Callable[[], None] | None</code> <p>Connection callback.</p> <code>None</code> <code>on_disconnect</code> <code>Callable[[], None] | None</code> <p>Disconnection callback.</p> <code>None</code>"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.register_type","title":"<code>register_type(data_type)</code>","text":"<p>Register a custom sendable type.</p> <p>Parameters:</p> Name Type Description Default <code>data_type</code> <code>type[BaseSendable]</code> <p>Sendable type to register.</p> required"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.add_hook","title":"<code>add_hook(key, data_type, callback)</code>","text":"<p>Add a callback to be triggered when sendable of data_type is set for a key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CommPath | str</code> <p>Key to listen to.</p> required <code>data_type</code> <code>type[T]</code> <p>Sendable type to listen for.</p> required <code>callback</code> <code>Callable[[str, T | None], None]</code> <p>Callback to trigger.</p> required"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.get","title":"<code>get(key, data_type)</code>","text":"<p>Retrieve and deserialize sendable by key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CommPath | str</code> <p>Key to retrieve.</p> required <code>data_type</code> <code>type[T]</code> <p>Sendable type to deserialize to.</p> required <p>Returns:</p> Type Description <code>T | None</code> <p>Sendable or None if not found.</p>"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.get_keys","title":"<code>get_keys()</code>","text":"<p>Gets all keys in the Redis database.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>List of keys.</p>"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.get_raw","title":"<code>get_raw(key)</code>","text":"<p>Retrieve the raw JSON for a key, ignoring the sendable deserialization.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CommPath | str</code> <p>Key to retrieve.</p> required <p>Returns:</p> Type Description <code>dict | None</code> <p>Raw JSON value or None if not found.</p>"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.get_all_raw","title":"<code>get_all_raw()</code>","text":"<p>Retrieve all raw JSON values as a dictionary of a key to raw value. May have slow performance.</p> <p>Returns:</p> Type Description <code>dict[str, dict] | None</code> <p>Dictionary of a key to raw value or None if not found.</p>"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.set","title":"<code>set(key, sendable)</code>","text":"<p>Set sendable in the Redis database.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CommPath | str</code> <p>Key to set</p> required <code>sendable</code> <code>BaseSendable | SendableGenerator</code> <p>Sendable to set</p> required"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.publish","title":"<code>publish(key, sendable)</code>","text":"<p>Publish sendable in the Redis Pub/Sub client.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CommPath | str</code> <p>Key to publish to</p> required <code>sendable</code> <code>BaseSendable | SendableGenerator</code> <p>Sendable to publish</p> required"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.subscribe","title":"<code>subscribe(key, data_type, callback)</code>","text":"<p>Subscribe to a Pub/Sub key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CommPath | str</code> <p>Key to subscribe to.</p> required <code>data_type</code> <code>type[T]</code> <p>Sendable type to deserialize to.</p> required <code>callback</code> <code>Callable[[str, T], None]</code> <p>Callback when data is received.</p> required"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.wipeall","title":"<code>wipeall()</code>","text":"<p>Delete all keys in the Redis database.</p>"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.delete","title":"<code>delete(key)</code>","text":"<p>Delete a key from the Redis database.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CommPath | str</code> <p>Key to delete.</p> required"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.connect","title":"<code>connect()</code>","text":"<p>Connect to the Redis server.</p>"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.is_connected","title":"<code>is_connected()</code>","text":"<p>Check if the Redis connection is established.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Is the connection established?</p>"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.get_latency","title":"<code>get_latency()</code>","text":"<p>Measure the round-trip latency to the Redis server in milliseconds.</p> <p>Returns:</p> Type Description <code>float | None</code> <p>Latency in milliseconds or None if not connected.</p>"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.wait_until_connected","title":"<code>wait_until_connected(timeout=5.0)</code>","text":"<p>Wait until the Redis connection is established.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>Timeout in seconds. Defaults to 5.0 seconds.</p> <code>5.0</code>"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.close","title":"<code>close()</code>","text":"<p>Close the Redis connection and stop the pubsub thread.</p>"},{"location":"reference/comm/#kevinbotlib.comm.RedisCommClient.reset_connection","title":"<code>reset_connection()</code>","text":"<p>Reset the connection to the Redis server</p>"},{"location":"reference/exceptions/","title":"Exceptions Reference","text":""},{"location":"reference/exceptions/#kevinbotlib.exceptions","title":"<code>kevinbotlib.exceptions</code>","text":""},{"location":"reference/exceptions/#kevinbotlib.exceptions.HandshakeTimeoutException","title":"<code>kevinbotlib.exceptions.HandshakeTimeoutException</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>Exception that is produced when the server-up wait times out</p>"},{"location":"reference/exceptions/#kevinbotlib.exceptions.JoystickMissingException","title":"<code>kevinbotlib.exceptions.JoystickMissingException</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>Exception that is produced when a requested gamepad is missing</p>"},{"location":"reference/exceptions/#kevinbotlib.exceptions.CommandSchedulerAlreadyExistsException","title":"<code>kevinbotlib.exceptions.CommandSchedulerAlreadyExistsException</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>Exception that is produced when an attempt to create more than one command scheduler was made</p>"},{"location":"reference/exceptions/#kevinbotlib.exceptions.CommandSchedulerDoesNotExistException","title":"<code>kevinbotlib.exceptions.CommandSchedulerDoesNotExistException</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>Exception that is produced when an attempt to get the current scheduler instance before creating a CommandScheduler</p>"},{"location":"reference/exceptions/#kevinbotlib.exceptions.LoggerNotConfiguredException","title":"<code>kevinbotlib.exceptions.LoggerNotConfiguredException</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>Exception that is produced when trying to log to a non-configured logger</p>"},{"location":"reference/exceptions/#kevinbotlib.exceptions.RobotStoppedException","title":"<code>kevinbotlib.exceptions.RobotStoppedException</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>Used when a non-urgent robot stop is triggered</p>"},{"location":"reference/exceptions/#kevinbotlib.exceptions.RobotEmergencyStoppedException","title":"<code>kevinbotlib.exceptions.RobotEmergencyStoppedException</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>Used when an urgent robot stop is triggered</p>"},{"location":"reference/exceptions/#kevinbotlib.exceptions.RobotLockedException","title":"<code>kevinbotlib.exceptions.RobotLockedException</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>Exception that is produced when another instance of a robot is running</p>"},{"location":"reference/exceptions/#kevinbotlib.exceptions.SshNotConnectedException","title":"<code>kevinbotlib.exceptions.SshNotConnectedException</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>Exception that is produced trying to interact with a disconnected SSH client</p>"},{"location":"reference/fileserver/","title":"File Server Reference","text":""},{"location":"reference/fileserver/#kevinbotlib.fileserver","title":"<code>kevinbotlib.fileserver</code>","text":""},{"location":"reference/fileserver/#kevinbotlib.fileserver.FileServer","title":"<code>kevinbotlib.fileserver.FileServer</code>","text":"<p>Simple HTTP file server for KevinbotLib</p>"},{"location":"reference/fileserver/#kevinbotlib.fileserver.FileServer.__init__","title":"<code>__init__(directory='.', http_port=8000, host='172.0.0.1')</code>","text":"<p>Initialize the file server.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>Directory to serve. Defaults to \".\"</p> <code>'.'</code> <code>http_port</code> <code>int</code> <p>Port to serve on. Defaults to 8000.</p> <code>8000</code> <code>host</code> <code>str</code> <p>Host to serve on. Defaults to \"127.0.0.1\".</p> <code>'172.0.0.1'</code>"},{"location":"reference/fileserver/#kevinbotlib.fileserver.FileServer.http_server_loop","title":"<code>http_server_loop()</code>","text":"<p>Start the WSGI file server</p>"},{"location":"reference/fileserver/#kevinbotlib.fileserver.FileServer.start","title":"<code>start(name='KevinbotLib.FileServer.Serve')</code>","text":"<p>Start the HTTP server.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the server thread. Defaults to \"KevinbotLib.FileServer.Serve\".</p> <code>'KevinbotLib.FileServer.Serve'</code>"},{"location":"reference/fileserver/#kevinbotlib.fileserver.FileServer.stop","title":"<code>stop()</code>","text":"<p>Shutdown the HTTP server.</p>"},{"location":"reference/hardwarecontroller/","title":"Hardware Controller Reference","text":""},{"location":"reference/hardwarecontroller/#kevinbotlib.hardware.controllers.keyvalue","title":"<code>kevinbotlib.hardware.controllers.keyvalue</code>","text":""},{"location":"reference/hardwarecontroller/#kevinbotlib.hardware.controllers.keyvalue.RawKeyValueSerialController","title":"<code>kevinbotlib.hardware.controllers.keyvalue.RawKeyValueSerialController</code>","text":"<p>A controller for managing key-value pairs over a raw serial interface</p>"},{"location":"reference/hardwarecontroller/#kevinbotlib.hardware.controllers.keyvalue.RawKeyValueSerialController.is_connected","title":"<code>is_connected</code>  <code>property</code>","text":"<p>Check if the serial connection is active</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Connection status</p>"},{"location":"reference/hardwarecontroller/#kevinbotlib.hardware.controllers.keyvalue.RawKeyValueSerialController.interface","title":"<code>interface</code>  <code>property</code>","text":"<p>Get the serial interface</p> <p>Returns:</p> Name Type Description <code>RawSerialInterface</code> <code>RawSerialInterface</code> <p>Serial interface</p>"},{"location":"reference/hardwarecontroller/#kevinbotlib.hardware.controllers.keyvalue.RawKeyValueSerialController.__init__","title":"<code>__init__(interface, delimeter=b'=', terminator=b'\\n')</code>","text":"<p>Initialize the controller with a serial interface</p> <p>Parameters:</p> Name Type Description Default <code>interface</code> <code>RawSerialInterface</code> <p>The serial interface to use</p> required <code>delimeter</code> <code>bytes</code> <p>Key-value delimeter</p> <code>b'='</code> <code>terminator</code> <code>bytes</code> <p>EOL character</p> <code>b'\\n'</code>"},{"location":"reference/hardwarecontroller/#kevinbotlib.hardware.controllers.keyvalue.RawKeyValueSerialController.write","title":"<code>write(key, value=None)</code>","text":"<p>Send a key-value pair over the serial connection</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>bytes</code> <p>The key to set</p> required <code>value</code> <code>bytes | None</code> <p>The value to associate with the key. If no value is provided, will not send a delimeter. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>int | None</code> <p>int | None: Number of bytes written</p>"},{"location":"reference/hardwarecontroller/#kevinbotlib.hardware.controllers.keyvalue.RawKeyValueSerialController.read","title":"<code>read()</code>","text":"<p>Read the next key-value pair from the serial connection</p> <p>Returns:</p> Type Description <code>tuple[bytes, bytes] | None</code> <p>tuple[bytes, bytes] | None: (key, value) tuple if successful, None otherwise</p>"},{"location":"reference/hardwareinterface/","title":"Hardware Interface Reference","text":""},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial","title":"<code>kevinbotlib.hardware.interfaces.serial</code>","text":""},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialDeviceInfo","title":"<code>kevinbotlib.hardware.interfaces.serial.SerialDeviceInfo</code>","text":"<p>Information about a serial device link.</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialDeviceInfo.device","title":"<code>device</code>  <code>instance-attribute</code>","text":"<p>Device</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialDeviceInfo.device_path","title":"<code>device_path</code>  <code>instance-attribute</code>","text":"<p>Device path. Ex: /dev/ttyAMA0.</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialDeviceInfo.name","title":"<code>name</code>  <code>instance-attribute</code>","text":"<p>Device name.</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialDeviceInfo.description","title":"<code>description</code>  <code>instance-attribute</code>","text":"<p>Device description.</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialDeviceInfo.manufacturer","title":"<code>manufacturer</code>  <code>instance-attribute</code>","text":"<p>Device manufacturer.</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialDeviceInfo.pid","title":"<code>pid</code>  <code>instance-attribute</code>","text":"<p>Device PID.</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialDeviceInfo.hwid","title":"<code>hwid</code>  <code>instance-attribute</code>","text":"<p>Device HWID.</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialIdentification","title":"<code>kevinbotlib.hardware.interfaces.serial.SerialIdentification</code>","text":"<p>Identify serial ports</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialIdentification.list_device_info","title":"<code>list_device_info()</code>  <code>staticmethod</code>","text":"<p>List of available connected serial ports</p> <p>Returns:</p> Type Description <code>list[SerialDeviceInfo]</code> <p>list[SerialDeviceInfo]: List of port info</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialParity","title":"<code>kevinbotlib.hardware.interfaces.serial.SerialParity</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Serial parity types</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialParity.NONE","title":"<code>NONE = serial.PARITY_NONE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>No parity checking.</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialParity.EVEN","title":"<code>EVEN = serial.PARITY_EVEN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Even parity checking.</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialParity.ODD","title":"<code>ODD = serial.PARITY_ODD</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Odd parity checking.</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialParity.MARK","title":"<code>MARK = serial.PARITY_MARK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Mark parity checking.</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.SerialParity.SPACE","title":"<code>SPACE = serial.PARITY_SPACE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Space parity checking.</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface","title":"<code>kevinbotlib.hardware.interfaces.serial.RawSerialInterface</code>","text":"<p>               Bases: <code>IOBase</code></p> <p>Raw serial interface</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.port","title":"<code>port</code>  <code>property</code> <code>writable</code>","text":"<p>The serial port device name (e.g., COM3 or /dev/ttyAMA0)</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.baudrate","title":"<code>baudrate</code>  <code>property</code> <code>writable</code>","text":"<p>The baud rate of the serial connection in bits per second</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.bytesize","title":"<code>bytesize</code>  <code>property</code> <code>writable</code>","text":"<p>The number of bits per byte (typically 8)</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.parity","title":"<code>parity</code>  <code>property</code> <code>writable</code>","text":"<p>The parity checking mode (e.g., NONE, EVEN, ODD)</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.stopbits","title":"<code>stopbits</code>  <code>property</code> <code>writable</code>","text":"<p>The number of stop bits (typically 1 or 2)</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.timeout","title":"<code>timeout</code>  <code>property</code> <code>writable</code>","text":"<p>The read timeout value in seconds (None for no timeout)</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.write_timeout","title":"<code>write_timeout</code>  <code>property</code> <code>writable</code>","text":"<p>The write timeout value in seconds (None for no timeout)</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.inter_byte_timeout","title":"<code>inter_byte_timeout</code>  <code>property</code> <code>writable</code>","text":"<p>The timeout between bytes in seconds (None to disable)</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.xonxoff","title":"<code>xonxoff</code>  <code>property</code> <code>writable</code>","text":"<p>Whether software flow control (XON/XOFF) is enabled</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.rtscts","title":"<code>rtscts</code>  <code>property</code> <code>writable</code>","text":"<p>Whether hardware RTS/CTS flow control is enabled</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.dsrdtr","title":"<code>dsrdtr</code>  <code>property</code> <code>writable</code>","text":"<p>Whether hardware DSR/DTR flow control is enabled</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.exclusive","title":"<code>exclusive</code>  <code>property</code> <code>writable</code>","text":"<p>Whether POSIX exclusive access mode is enabled (None for platform default)</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.is_open","title":"<code>is_open</code>  <code>property</code>","text":"<p>Is the serial port open?</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Open state</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.in_waiting","title":"<code>in_waiting</code>  <code>property</code>","text":"<p>Get the number of bytes in the transmit buffer</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Number of bytes</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.out_waiting","title":"<code>out_waiting</code>  <code>property</code>","text":"<p>Get the number of bytes in the receive buffer</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Number of bytes</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.break_condition","title":"<code>break_condition</code>  <code>property</code> <code>writable</code>","text":"<p>Serial <code>BREAK</code> condition, no transmit when active</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>BREAK condition</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.rts","title":"<code>rts</code>  <code>property</code> <code>writable</code>","text":"<p>Serial <code>RTS</code> line, setting before connecting is possible</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>RTS</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.dtr","title":"<code>dtr</code>  <code>property</code> <code>writable</code>","text":"<p>Serial <code>DTR</code> line, setting before connecting is possible</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>DTR</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.cts","title":"<code>cts</code>  <code>property</code>","text":"<p>Get the state if the <code>CTS</code> line</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>CTS state</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.ri","title":"<code>ri</code>  <code>property</code>","text":"<p>Get the state if the <code>RI</code> line</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>RI state</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.cd","title":"<code>cd</code>  <code>property</code>","text":"<p>Get the state if the <code>CD</code> line</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>CD state</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.device_name","title":"<code>device_name</code>  <code>property</code>","text":"<p>Device name</p> <p>Returns:</p> Type Description <code>str | None</code> <p>str | None: Device name, if available</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.__init__","title":"<code>__init__(port=None, baudrate=9600, bytesize=8, parity=SerialParity.NONE, stopbits=1, timeout=None, write_timeout=None, inter_byte_timeout=None, *, xonxoff=False, rtscts=False, dsrdtr=False, exclusive=None)</code>","text":"<p>Initialize a new serial port connection</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>str | None</code> <p>The device to connect to e.g. COM3 of /dev/ttyAMA0. Defaults to None.</p> <code>None</code> <code>baudrate</code> <code>int</code> <p>The baud rate to utilize. Defaults to 9600.</p> <code>9600</code> <code>bytesize</code> <code>int</code> <p>Size of each byte to be sent. The default works for most use cases. Defaults to 8.</p> <code>8</code> <code>parity</code> <code>SerialParity</code> <p>Parity type. Defaults to SerialParity.NONE.</p> <code>NONE</code> <code>stopbits</code> <code>float</code> <p>Number of stop bits to utilize. Defaults to 1.</p> <code>1</code> <code>timeout</code> <code>float | None</code> <p>Read timeout in seconds. Defaults to None.</p> <code>None</code> <code>write_timeout</code> <code>float | None</code> <p>Write timeout in seconds. Defaults to None.</p> <code>None</code> <code>inter_byte_timeout</code> <code>float | None</code> <p>Timeout between characters. Set to None to disable. Defaults to None.</p> <code>None</code> <code>xonxoff</code> <code>bool</code> <p>Enable software flow control. Defaults to False.</p> <code>False</code> <code>rtscts</code> <code>bool</code> <p>Enable hardware RTS/CTS flow control. Defaults to False.</p> <code>False</code> <code>dsrdtr</code> <code>bool</code> <p>Enable hardware DSR/DTR flow control. Defaults to False.</p> <code>False</code> <code>exclusive</code> <code>bool | None</code> <p>POSIX exclusive access mode. Defaults to None.</p> <code>None</code>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.open","title":"<code>open()</code>","text":"<p>Attempt to open the serial port</p> <p>Raises:</p> Type Description <code>SerialPortOpenFailure</code> <p>Port failed to open</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.read","title":"<code>read(n=1)</code>","text":"<p>Reads <code>n</code> bytes from the serial port</p> <p>Blocks until <code>n</code> number of bytes are read, or read timeout</p> <p>May return fewer than <code>n</code> characters on timeout</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of bytes to read. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>Character array</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.read_until","title":"<code>read_until(term=b'\\n', size=None)</code>","text":"<pre><code>    Reads until `term` is found, `size` bytes is reached, or read timeout\n\n    Args:\n        term (bytes, optional): Termination bytes. Defaults to b'\n</code></pre> <p>'.             size (int | None, optional): Maximum bytes to read. Defaults to None.</p> <pre><code>    Returns:\n        bytes: Character array\n</code></pre>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.write","title":"<code>write(data)</code>","text":"<p>Write bytes to the serial port</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>Bytes to write</p> required <p>Returns:</p> Type Description <code>int | None</code> <p>int | None: Number of bytes written</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.flush","title":"<code>flush()</code>","text":"<p>Wait until all serial data is written</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.reset_input_buffer","title":"<code>reset_input_buffer()</code>","text":"<p>Clear the input buffer, delete and ignore all data</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.reset_output_buffer","title":"<code>reset_output_buffer()</code>","text":"<p>Clear the output buffer, delete and ignore all data</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.reset_buffers","title":"<code>reset_buffers()</code>","text":"<p>Reset input and output buffers, delete and ignore all data</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.serial.RawSerialInterface.send_break","title":"<code>send_break(duration=0.25)</code>","text":"<p>Send the break condition for <code>duration</code>, then return to idle state</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>float</code> <p>Seconds for BREAK condition. Defaults to 0.25.</p> <code>0.25</code>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.exceptions","title":"<code>kevinbotlib.hardware.interfaces.exceptions</code>","text":""},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.exceptions.SerialPortOpenFailure","title":"<code>kevinbotlib.hardware.interfaces.exceptions.SerialPortOpenFailure</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>Exception that is raised on failure to open serial port</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.exceptions.BaseSerialTimeoutException","title":"<code>kevinbotlib.hardware.interfaces.exceptions.BaseSerialTimeoutException</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>Exception that is raised on a serial operation timeout</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.exceptions.SerialWriteTimeout","title":"<code>kevinbotlib.hardware.interfaces.exceptions.SerialWriteTimeout</code>","text":"<p>               Bases: <code>BaseSerialTimeoutException</code></p> <p>Exception that is raised on a serial write timeout</p>"},{"location":"reference/hardwareinterface/#kevinbotlib.hardware.interfaces.exceptions.SerialException","title":"<code>kevinbotlib.hardware.interfaces.exceptions.SerialException</code>","text":"<p>               Bases: <code>BaseException</code></p> <p>Exception that is raised on a general serial communication failure</p>"},{"location":"reference/joystick/","title":"Joystick Interface Reference","text":""},{"location":"reference/joystick/#kevinbotlib.joystick","title":"<code>kevinbotlib.joystick</code>","text":""},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons","title":"<code>kevinbotlib.joystick.NamedControllerButtons</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Named controller buttons provided by the SDL2 backend</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.A","title":"<code>A = sdl2.SDL_CONTROLLER_BUTTON_A</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.B","title":"<code>B = sdl2.SDL_CONTROLLER_BUTTON_B</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>B button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.X","title":"<code>X = sdl2.SDL_CONTROLLER_BUTTON_X</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>X button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.Y","title":"<code>Y = sdl2.SDL_CONTROLLER_BUTTON_Y</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Y button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.DpadUp","title":"<code>DpadUp = sdl2.SDL_CONTROLLER_BUTTON_DPAD_UP</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>D-Pad Up button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.DpadDown","title":"<code>DpadDown = sdl2.SDL_CONTROLLER_BUTTON_DPAD_DOWN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>D-Pad Down button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.DpadLeft","title":"<code>DpadLeft = sdl2.SDL_CONTROLLER_BUTTON_DPAD_LEFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>D-Pad Left button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.DpadRight","title":"<code>DpadRight = sdl2.SDL_CONTROLLER_BUTTON_DPAD_RIGHT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>D-Pad Right button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.LeftBumper","title":"<code>LeftBumper = sdl2.SDL_CONTROLLER_BUTTON_LEFTSHOULDER</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Left bumper button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.RightBumper","title":"<code>RightBumper = sdl2.SDL_CONTROLLER_BUTTON_RIGHTSHOULDER</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Right bumper button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.Back","title":"<code>Back = sdl2.SDL_CONTROLLER_BUTTON_BACK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Back button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.Start","title":"<code>Start = sdl2.SDL_CONTROLLER_BUTTON_START</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Start button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.Guide","title":"<code>Guide = sdl2.SDL_CONTROLLER_BUTTON_GUIDE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Guide button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.LeftStick","title":"<code>LeftStick = sdl2.SDL_CONTROLLER_BUTTON_LEFTSTICK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Left stick button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.RightStick","title":"<code>RightStick = sdl2.SDL_CONTROLLER_BUTTON_RIGHTSTICK</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Right stick button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.Misc1","title":"<code>Misc1 = sdl2.SDL_CONTROLLER_BUTTON_MISC1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Miscellaneous button (may be detected as the Share button on some platforms)</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.Paddle1","title":"<code>Paddle1 = sdl2.SDL_CONTROLLER_BUTTON_PADDLE1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Paddle 1</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.Paddle2","title":"<code>Paddle2 = sdl2.SDL_CONTROLLER_BUTTON_PADDLE2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Paddle 2</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.Paddle3","title":"<code>Paddle3 = sdl2.SDL_CONTROLLER_BUTTON_PADDLE3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Paddle 3</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.Paddle4","title":"<code>Paddle4 = sdl2.SDL_CONTROLLER_BUTTON_PADDLE4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Paddle 4</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerButtons.Touchpad","title":"<code>Touchpad = sdl2.SDL_CONTROLLER_BUTTON_TOUCHPAD</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Touchpad button on Playstation-style controllers</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerAxis","title":"<code>kevinbotlib.joystick.NamedControllerAxis</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Named Axis Identifiers provided by the SDL2 backend</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerAxis.LeftX","title":"<code>LeftX = sdl2.SDL_CONTROLLER_AXIS_LEFTX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Left Stick X-Axis</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerAxis.LeftY","title":"<code>LeftY = sdl2.SDL_CONTROLLER_AXIS_LEFTY</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Left Stick Y-Axis</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerAxis.RightX","title":"<code>RightX = sdl2.SDL_CONTROLLER_AXIS_RIGHTX</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Right Stick X-Axis</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerAxis.RightY","title":"<code>RightY = sdl2.SDL_CONTROLLER_AXIS_RIGHTY</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Right Stick Y-Axis</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerAxis.LeftTrigger","title":"<code>LeftTrigger = sdl2.SDL_CONTROLLER_AXIS_TRIGGERLEFT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Left Trigger Axis</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NamedControllerAxis.RightTrigger","title":"<code>RightTrigger = sdl2.SDL_CONTROLLER_AXIS_TRIGGERRIGHT</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Right Trigger Axis</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.POVDirection","title":"<code>kevinbotlib.joystick.POVDirection</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>D-pad directions in degrees.</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.POVDirection.UP","title":"<code>UP = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Up button (0 degrees)</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.POVDirection.UP_RIGHT","title":"<code>UP_RIGHT = 45</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Up and right button (45 degrees)</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.POVDirection.RIGHT","title":"<code>RIGHT = 90</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Right button (90 degrees)</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.POVDirection.DOWN_RIGHT","title":"<code>DOWN_RIGHT = 135</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Down and right button (135 degrees)</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.POVDirection.DOWN","title":"<code>DOWN = 180</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Down button (180 degrees)</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.POVDirection.DOWN_LEFT","title":"<code>DOWN_LEFT = 225</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Down and left button (225 degrees)</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.POVDirection.LEFT","title":"<code>LEFT = 270</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Left button (270 degrees)</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.POVDirection.UP_LEFT","title":"<code>UP_LEFT = 315</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Up and left button (315 degrees)</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.POVDirection.NONE","title":"<code>NONE = -1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Centered (no buttons)</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.ControllerMap","title":"<code>kevinbotlib.joystick.ControllerMap</code>","text":"<p>Controller mapping for joystick events.</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.ControllerMap.map_button","title":"<code>map_button(button_id)</code>","text":"<p>Maps a button using the controller map.</p> <p>Parameters:</p> Name Type Description Default <code>button_id</code> <code>int</code> <p>Raw input button</p> required <p>Returns:</p> Type Description <code>int</code> <p>Mapped button</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.ControllerMap.map_axis","title":"<code>map_axis(axis_id)</code>","text":"<p>Maps an axis using the controller map.</p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code>int</code> <p>Raw input axis</p> required <p>Returns:</p> Type Description <code>int</code> <p>Mapped Axis</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalJoystickIdentifiers","title":"<code>kevinbotlib.joystick.LocalJoystickIdentifiers</code>","text":"<p>Static class to handle joystick identification queries.</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalJoystickIdentifiers.get_count","title":"<code>get_count()</code>  <code>staticmethod</code>","text":"<p>Returns the number of connected joysticks.</p> <p>Returns:</p> Type Description <code>int</code> <p>Controller count</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalJoystickIdentifiers.get_names","title":"<code>get_names()</code>  <code>staticmethod</code>","text":"<p>Returns a dictionary of joystick indices and their corresponding names.</p> <p>Returns:</p> Type Description <code>dict[int, str]</code> <p>Dictionary of names from index keys</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalJoystickIdentifiers.get_guids","title":"<code>get_guids()</code>  <code>staticmethod</code>","text":"<p>Returns a dictionary of joystick indices and their corresponding GUIDs.</p> <p>Returns:</p> Type Description <code>dict[int, bytes]</code> <p>Dictionary of GUIDs from index keys</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.AbstractJoystickInterface","title":"<code>kevinbotlib.joystick.AbstractJoystickInterface</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract joystick implementation. Use this as a base if you want to create a custom joystick implementation.</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.AbstractJoystickInterface.controller_map","title":"<code>controller_map</code>  <code>property</code>","text":"<p>Get the applied controller map</p> <p>Returns:</p> Type Description <code>ControllerMap</code> <p>Applied controller map</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.AbstractJoystickInterface.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the abstract joystick</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.AbstractJoystickInterface.apply_map","title":"<code>apply_map(controller_map)</code>  <code>abstractmethod</code>","text":"<p>Apply a controller map</p> <p>Parameters:</p> Name Type Description Default <code>controller_map</code> <code>ControllerMap</code> <p>Controller map</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.AbstractJoystickInterface.get_button_state","title":"<code>get_button_state(button_id)</code>  <code>abstractmethod</code>","text":"<p>Get the state of a button by index or named button. Args:     button_id: Button</p> <p>Returns:</p> Type Description <code>bool</code> <p>Is the button pressed?</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.AbstractJoystickInterface.get_axis_value","title":"<code>get_axis_value(axis_id, precision=3)</code>  <code>abstractmethod</code>","text":"<p>Get the state of an axis by index or named axis.</p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code>int | IntEnum</code> <p>Axis</p> required <code>precision</code> <code>int</code> <p>Decimal precision</p> <code>3</code> <p>Returns:</p> Type Description <code>float</code> <p>Axis value</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.AbstractJoystickInterface.get_buttons","title":"<code>get_buttons()</code>  <code>abstractmethod</code>","text":"<p>Get a list of all pressed buttons</p> <p>Returns:</p> Type Description <code>list[int | Enum | IntEnum]</code> <p>List of pressed buttons</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.AbstractJoystickInterface.get_axes","title":"<code>get_axes()</code>  <code>abstractmethod</code>","text":"<p>Get a list of all axis values.</p> <p>Returns:</p> Type Description <code>list[int | Enum | IntEnum]</code> <p>List of all axis values</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.AbstractJoystickInterface.get_pov_direction","title":"<code>get_pov_direction()</code>  <code>abstractmethod</code>","text":"<p>Get the current D-Pad direction.</p> <p>Returns:</p> Type Description <code>POVDirection</code> <p>D-Pad direction</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.AbstractJoystickInterface.register_button_callback","title":"<code>register_button_callback(button_id, callback)</code>  <code>abstractmethod</code>","text":"<p>Register a new callback when a button is pressed.</p> <p>Parameters:</p> Name Type Description Default <code>button_id</code> <code>int | Enum | IntEnum</code> <p>Button index or named button</p> required <code>callback</code> <code>Callable[[bool], Any]</code> <p>Callback to be triggered when the specified button is pressed</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.AbstractJoystickInterface.register_pov_callback","title":"<code>register_pov_callback(callback)</code>  <code>abstractmethod</code>","text":"<p>Register a new callback when the D-Pad direction is changed.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[POVDirection], Any]</code> <p>Callback to be triggered when the D-Pad changes direction</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.AbstractJoystickInterface.is_connected","title":"<code>is_connected()</code>  <code>abstractmethod</code>","text":"<p>Detect if the joystick device is connnected</p> <p>Returns:</p> Type Description <code>bool</code> <p>Connected?</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NullJoystick","title":"<code>kevinbotlib.joystick.NullJoystick</code>","text":"<p>               Bases: <code>AbstractJoystickInterface</code></p> <p>A fake joystick implementation that will do nothing.</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NullJoystick.get_button_state","title":"<code>get_button_state(_)</code>","text":"<p>Get the state of a button. Args:     _: Button index or named button</p> <p>Returns:</p> Type Description <code>bool</code> <p>False</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NullJoystick.get_axis_value","title":"<code>get_axis_value(_, __=3)</code>","text":"<p>Get the state of an axis. Args:     _: Axis index or named axis     __: Decimal precision</p> <p>Returns:</p> Type Description <code>float</code> <p>0.0</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NullJoystick.get_buttons","title":"<code>get_buttons()</code>","text":"<p>Get a list of all pressed buttons by index</p> <p>Returns:</p> Type Description <code>list[int | Enum | IntEnum]</code> <p>[]</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NullJoystick.get_axes","title":"<code>get_axes()</code>","text":"<p>Get a list of all axes.</p> <p>Returns:</p> Type Description <code>list[int | Enum | IntEnum]</code> <p>[]</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NullJoystick.get_pov_direction","title":"<code>get_pov_direction()</code>","text":"<p>Get the current D-Pad direction.</p> <p>Returns:</p> Type Description <code>POVDirection</code> <p>POVDirection.NONE</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NullJoystick.register_button_callback","title":"<code>register_button_callback(_, __)</code>","text":"<p>Register a new callback when a button is pressed.</p> <p>Parameters:</p> Name Type Description Default <code>_</code> <code>int | Enum | IntEnum</code> <p>Button index or named button</p> required <code>__</code> <code>Callable[[bool], Any]</code> <p>Callback to be triggered when the specified button is pressed</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.NullJoystick.register_pov_callback","title":"<code>register_pov_callback(_)</code>","text":"<p>Register a new callback when the D-Pad direction is changed.</p> <p>Parameters:</p> Name Type Description Default <code>_</code> <code>Callable[[POVDirection], Any]</code> <p>Callback to be triggered when the D-Pad changes direction</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.NullJoystick.is_connected","title":"<code>is_connected()</code>","text":"<p>Detect if the joystick device is connnected</p> <p>Returns:</p> Type Description <code>bool</code> <p>False</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.NullJoystick.apply_map","title":"<code>apply_map(_controller_map)</code>","text":"<p>Apply a controller map</p> <p>Parameters:</p> Name Type Description Default <code>_controller_map</code> <code>ControllerMap</code> <p>Controller map</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice","title":"<code>kevinbotlib.joystick.RawLocalJoystickDevice</code>","text":"<p>               Bases: <code>AbstractJoystickInterface</code></p> <p>Gamepad-agnostic polling and event-based joystick input with disconnect detection.</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice.__init__","title":"<code>__init__(index, polling_hz=100)</code>","text":"<p>Initialize the joystick system</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>Controller index</p> required <code>polling_hz</code> <code>int</code> <p>Polling rate. Defaults to 100hz.</p> <code>100</code>"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice.is_connected","title":"<code>is_connected()</code>","text":"<p>Get if the controller is connected</p> <p>Returns:</p> Type Description <code>bool</code> <p>Connected?</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice.get_button_count","title":"<code>get_button_count()</code>","text":"<p>Returns the total number of buttons on the joystick.</p> <p>Returns:</p> Type Description <code>int</code> <p>Button count</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice.get_button_state","title":"<code>get_button_state(button_id)</code>","text":"<p>Returns the state of a button (pressed: True, released: False).</p> <p>Parameters:</p> Name Type Description Default <code>button_id</code> <code>int</code> <p>Button index</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Button state</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice.get_axis_value","title":"<code>get_axis_value(axis_id, precision=3)</code>","text":"<p>Returns the current value of the specified axis (-1.0 to 1.0).</p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code>int</code> <p>Axis index</p> required <code>precision</code> <code>int</code> <p>Decimal precision</p> <code>3</code> <p>Returns:</p> Type Description <code>float</code> <p>Axis value</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice.get_buttons","title":"<code>get_buttons()</code>","text":"<p>Get a list of all pressed buttons</p> <p>Returns:</p> Type Description <code>list[int]</code> <p>List of pressed buttons</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice.get_axes","title":"<code>get_axes(precision=3)</code>","text":"<p>Get a list of all axis values.</p> <p>Parameters:</p> Name Type Description Default <code>precision</code> <code>int</code> <p>Decimal precision</p> <code>3</code> <p>Returns:     List of all axis values</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice.get_pov_direction","title":"<code>get_pov_direction()</code>","text":"<p>Get the current D-Pad direction.</p> <p>Returns:</p> Type Description <code>POVDirection</code> <p>D-Pad direction</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice.rumble","title":"<code>rumble(low_power, high_power, duration)</code>","text":"<p>Set the controller rumble motors.</p> <p>Parameters:</p> Name Type Description Default <code>low_power</code> <code>float</code> <p>Low powered motor percent (0 to 1)</p> required <code>high_power</code> <code>float</code> <p>High powered motor percent (0 to 1)</p> required <code>duration</code> <code>float</code> <p>Duration of rumble in seconds</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice.register_button_callback","title":"<code>register_button_callback(button_id, callback)</code>","text":"<p>Register a new callback when a button is pressed.</p> <p>Parameters:</p> Name Type Description Default <code>button_id</code> <code>int</code> <p>Button index or named button</p> required <code>callback</code> <code>Callable[[bool], Any]</code> <p>Callback to be triggered when the specified button is pressed</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice.register_pov_callback","title":"<code>register_pov_callback(callback)</code>","text":"<p>Register a new callback when the D-Pad direction is changed.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[POVDirection], Any]</code> <p>Callback to be triggered when the D-Pad changes direction</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice.apply_map","title":"<code>apply_map(controller_map)</code>","text":"<p>Apply a controller map</p> <p>Parameters:</p> Name Type Description Default <code>controller_map</code> <code>ControllerMap</code> <p>Controller map</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice.start_polling","title":"<code>start_polling()</code>","text":"<p>Starts the polling loop in a separate thread.</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RawLocalJoystickDevice.stop","title":"<code>stop()</code>","text":"<p>Stops event handling and releases resources.</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalNamedController","title":"<code>kevinbotlib.joystick.LocalNamedController</code>","text":"<p>               Bases: <code>RawLocalJoystickDevice</code></p> <p>Controller with named buttons and axes.</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalNamedController.get_button_state","title":"<code>get_button_state(button)</code>","text":"<p>Returns the state of a button (pressed: True, released: False).</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>NamedControllerButtons</code> <p>Named button</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Button state</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalNamedController.get_buttons","title":"<code>get_buttons()</code>","text":"<p>Get a list of all pressed buttons</p> <p>Returns:</p> Type Description <code>list[NamedControllerButtons]</code> <p>List of pressed buttons</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalNamedController.register_button_callback","title":"<code>register_button_callback(button, callback)</code>","text":"<p>Register a new callback when a button is pressed.</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>NamedControllerButtons</code> <p>Named button</p> required <code>callback</code> <code>Callable[[bool], Any]</code> <p>Callback to be triggered when the specified button is pressed</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalNamedController.get_dpad_direction","title":"<code>get_dpad_direction()</code>","text":"<p>Gets the D-Pad direction. Functionally the same as <code>get_pov_direction</code>.</p> <p>Returns:</p> Type Description <code>POVDirection</code> <p>POV Direction</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalNamedController.get_trigger_value","title":"<code>get_trigger_value(trigger, precision=3)</code>","text":"<p>Returns the current value of the specified trigger (0.0 to 1.0).</p> <p>Parameters:</p> Name Type Description Default <code>trigger</code> <code>NamedControllerAxis</code> <p><code>NamedControllerAxis.LeftTrigger</code> or <code>NamedControllerAxis.RightTrigger</code></p> required <code>precision</code> <code>int</code> <p>Decimal precision</p> <code>3</code> <p>Returns:</p> Type Description <code>float</code> <p>Trigger value</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalNamedController.get_axis_value","title":"<code>get_axis_value(axis_id, precision=3)</code>","text":"<p>Returns the current value of the specified axis (-1.0 to 1.0).</p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code>int | IntEnum</code> <p>Named axis</p> required <code>precision</code> <code>int</code> <p>Decimal precision</p> <code>3</code> <p>Returns:</p> Type Description <code>float</code> <p>Axis value</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalNamedController.get_triggers","title":"<code>get_triggers(precision=3)</code>","text":"<p>Get the current value of the trigger axes (0.0 to 1.0).</p> <p>Parameters:</p> Name Type Description Default <code>precision</code> <code>int</code> <p>Decimal precision</p> <code>3</code> <p>Returns:</p> Type Description <code>tuple[float, float]</code> <p>Both trigger axes</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalNamedController.get_left_stick","title":"<code>get_left_stick(precision=3)</code>","text":"<p>Get the left stick values Args:     precision: Decimal precision</p> <p>Returns:</p> Type Description <code>tuple[float, float]</code> <p>X and Y axes</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalNamedController.get_right_stick","title":"<code>get_right_stick(precision=3)</code>","text":"<p>Get the right stick values Args:     precision: Decimal precision</p> <p>Returns:</p> Type Description <code>tuple[float, float]</code> <p>X and Y axes</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.LocalNamedController.register_dpad_callback","title":"<code>register_dpad_callback(callback)</code>","text":"<p>Register a new callback when the D-Pad direction is changed. Functionally the same as <code>register_pov_callback</code></p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[POVDirection], Any]</code> <p>Callback to be triggered when the D-Pad changes direction</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.JoystickSender","title":"<code>kevinbotlib.joystick.JoystickSender</code>","text":"<p>Joystick data sender for <code>RedisCommClient</code></p>"},{"location":"reference/joystick/#kevinbotlib.joystick.JoystickSender.__init__","title":"<code>__init__(client, joystick, key)</code>","text":"<p>Initialize the joystick sender</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>RedisCommClient</code> <p>Communication client to send data</p> required <code>joystick</code> <code>AbstractJoystickInterface</code> <p>Joystick interface to poll</p> required <code>key</code> <code>str</code> <p>Network key to set data on</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.JoystickSender.start","title":"<code>start()</code>","text":"<p>Start sending data</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.JoystickSender.stop","title":"<code>stop()</code>","text":"<p>Stop sending data</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.DynamicJoystickSender","title":"<code>kevinbotlib.joystick.DynamicJoystickSender</code>","text":"<p>Joystick data sender for <code>RedisCommClient</code> that can switch out joystick classes while running</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.DynamicJoystickSender.__init__","title":"<code>__init__(client, joystick_getter, key)</code>","text":"<p>Initialize the joystick sender</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>RedisCommClient</code> <p>Communication client to send data</p> required <code>joystick_getter</code> <code>Callable[[], AbstractJoystickInterface]</code> <p>Joystick interface to poll</p> required <code>key</code> <code>str</code> <p>Network key to set data on</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.DynamicJoystickSender.start","title":"<code>start()</code>","text":"<p>Start sending data</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.DynamicJoystickSender.stop","title":"<code>stop()</code>","text":"<p>Stop sending data</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice","title":"<code>kevinbotlib.joystick.RemoteRawJoystickDevice</code>","text":"<p>               Bases: <code>AbstractJoystickInterface</code></p> <p>Joystick interface for <code>JoystickSender</code></p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice.client","title":"<code>client</code>  <code>property</code>","text":"<p>Get the connected client</p> <p>Returns:</p> Type Description <code>RedisCommClient</code> <p>Communication client</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice.key","title":"<code>key</code>  <code>property</code>","text":"<p>Get the sendable key</p> <p>Returns:</p> Type Description <code>str</code> <p>Sendable key</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice.__init__","title":"<code>__init__(client, key, callback_polling_hz=100)</code>","text":"<p>Initialize the joystick interface</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>RedisCommClient</code> <p>Communication client</p> required <code>key</code> <code>str</code> <p>Network sendable key</p> required <code>callback_polling_hz</code> <code>int</code> <p>Polling rate. Defaults to 100hz.</p> <code>100</code>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice.is_connected","title":"<code>is_connected()</code>","text":"<p>Get if the controller is connected</p> <p>Returns:</p> Type Description <code>bool</code> <p>Connected?</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice.get_button_state","title":"<code>get_button_state(button_id)</code>","text":"<p>Get the state of a button by index or named button. Args:     button_id: Button</p> <p>Returns:</p> Type Description <code>bool</code> <p>Is the button pressed?</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice.get_axis_value","title":"<code>get_axis_value(axis_id, precision=3)</code>","text":"<p>Get the state of an axis by index or named axis.</p> <p>Parameters:</p> Name Type Description Default <code>axis_id</code> <code>int</code> <p>Axis</p> required <code>precision</code> <code>int</code> <p>Decimal precision</p> <code>3</code> <p>Returns:</p> Type Description <code>float</code> <p>Axis value</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice.get_buttons","title":"<code>get_buttons()</code>","text":"<p>Get a list of all pressed buttons</p> <p>Returns:</p> Type Description <code>list[int | Enum | IntEnum]</code> <p>List of pressed buttons</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice.get_axes","title":"<code>get_axes()</code>","text":"<p>Get a list of all axis values.</p> <p>Returns:</p> Type Description <code>list[float]</code> <p>List of all axis values</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice.get_pov_direction","title":"<code>get_pov_direction()</code>","text":"<p>Get the current D-Pad direction.</p> <p>Returns:</p> Type Description <code>POVDirection</code> <p>D-Pad direction</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice.register_button_callback","title":"<code>register_button_callback(button_id, callback)</code>","text":"<p>Register a new callback when a button is pressed.</p> <p>Parameters:</p> Name Type Description Default <code>button_id</code> <code>int | Enum | IntEnum</code> <p>Button index or named button</p> required <code>callback</code> <code>Callable[[bool], Any]</code> <p>Callback to be triggered when the specified button is pressed</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice.register_pov_callback","title":"<code>register_pov_callback(callback)</code>","text":"<p>Register a new callback when the D-Pad direction is changed.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[POVDirection], Any]</code> <p>Callback to be triggered when the D-Pad changes direction</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice.apply_map","title":"<code>apply_map(controller_map)</code>","text":"<p>Apply a controller map</p> <p>Parameters:</p> Name Type Description Default <code>controller_map</code> <code>ControllerMap</code> <p>Controller map</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice.start_polling","title":"<code>start_polling()</code>","text":"<p>Starts the polling loop in a separate thread.</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteRawJoystickDevice.stop","title":"<code>stop()</code>","text":"<p>Stops the polling thread.</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteNamedController","title":"<code>kevinbotlib.joystick.RemoteNamedController</code>","text":"<p>               Bases: <code>RemoteRawJoystickDevice</code></p> <p>Remote controller with named buttons and axes.</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteNamedController.get_button_state","title":"<code>get_button_state(button)</code>","text":"<p>Returns the state of a button (pressed: True, released: False).</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>NamedControllerButtons</code> <p>Named button</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Button state</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteNamedController.get_buttons","title":"<code>get_buttons()</code>","text":"<p>Get a list of all pressed buttons</p> <p>Returns:</p> Type Description <code>list[NamedControllerButtons]</code> <p>List of pressed buttons</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteNamedController.get_axes","title":"<code>get_axes(precision=3)</code>","text":"<p>Get a list of all axis values.</p> <p>Parameters:</p> Name Type Description Default <code>precision</code> <code>int</code> <p>Decimal precision</p> <code>3</code> <p>Returns:     List of all axis values</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteNamedController.register_button_callback","title":"<code>register_button_callback(button, callback)</code>","text":"<p>Register a new callback when a button is pressed.</p> <p>Parameters:</p> Name Type Description Default <code>button</code> <code>NamedControllerButtons</code> <p>Button index or named button</p> required <code>callback</code> <code>Callable[[bool], Any]</code> <p>Callback to be triggered when the specified button is pressed</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteNamedController.register_dpad_callback","title":"<code>register_dpad_callback(callback)</code>","text":"<p>Register a new callback when the D-Pad direction is changed. Functionally the same as <code>register_pov_callback</code></p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[POVDirection], Any]</code> <p>Callback to be triggered when the D-Pad changes direction</p> required"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteNamedController.get_dpad_direction","title":"<code>get_dpad_direction()</code>","text":"<p>Gets the D-Pad direction. Functionally the same as <code>get_pov_direction</code>.</p> <p>Returns:</p> Type Description <code>POVDirection</code> <p>POV Direction</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteNamedController.get_trigger_value","title":"<code>get_trigger_value(trigger, precision=3)</code>","text":"<p>Returns the current value of the specified trigger (0.0 to 1.0).</p> <p>Parameters:</p> Name Type Description Default <code>trigger</code> <code>NamedControllerAxis</code> <p><code>NamedControllerAxis.LeftTrigger</code> or <code>NamedControllerAxis.RightTrigger</code></p> required <code>precision</code> <code>int</code> <p>Decimal precision</p> <code>3</code> <p>Returns:</p> Type Description <code>float</code> <p>Trigger value</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteNamedController.get_triggers","title":"<code>get_triggers(precision=3)</code>","text":"<p>Get the current value of the trigger axes (0.0 to 1.0).</p> <p>Parameters:</p> Name Type Description Default <code>precision</code> <code>int</code> <p>Decimal precision</p> <code>3</code> <p>Returns:</p> Type Description <code>list[float]</code> <p>Both trigger axes</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteNamedController.get_left_stick","title":"<code>get_left_stick(precision=3)</code>","text":"<p>Get the left stick values Args:     precision: Decimal precision</p> <p>Returns:</p> Type Description <code>list[float]</code> <p>X and Y axes</p>"},{"location":"reference/joystick/#kevinbotlib.joystick.RemoteNamedController.get_right_stick","title":"<code>get_right_stick(precision=3)</code>","text":"<p>Get the right stick values Args:     precision: Decimal precision</p> <p>Returns:</p> Type Description <code>list[float]</code> <p>X and Y axes</p>"},{"location":"reference/logging/","title":"Logger Reference","text":""},{"location":"reference/logging/#kevinbotlib.logger","title":"<code>kevinbotlib.logger</code>","text":""},{"location":"reference/logging/#kevinbotlib.logger.FileLoggerConfig","title":"<code>kevinbotlib.logger.FileLoggerConfig</code>  <code>dataclass</code>","text":"<p>Configuration for file-based logging</p>"},{"location":"reference/logging/#kevinbotlib.logger.FileLoggerConfig.directory","title":"<code>directory = field(default_factory=LoggerDirectories.get_logger_directory)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Directory to store log files. Defaults to the user's data directory.</p>"},{"location":"reference/logging/#kevinbotlib.logger.FileLoggerConfig.rotation_size","title":"<code>rotation_size = '150MB'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Rotation size for the log file. Defaults to 150MB.</p>"},{"location":"reference/logging/#kevinbotlib.logger.FileLoggerConfig.level","title":"<code>level = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Logging level for the log file. Defaults to the global logging level.</p>"},{"location":"reference/logging/#kevinbotlib.logger.Level","title":"<code>kevinbotlib.logger.Level</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Logging levels</p>"},{"location":"reference/logging/#kevinbotlib.logger.Level.TRACE","title":"<code>TRACE = _internal_logger.level('TRACE')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Trace level logging - used for more detailed info than DEBUG - level no. 5</p>"},{"location":"reference/logging/#kevinbotlib.logger.Level.DEBUG","title":"<code>DEBUG = _internal_logger.level('DEBUG')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Debug level logging - used for debugging info - level no. 10</p>"},{"location":"reference/logging/#kevinbotlib.logger.Level.INFO","title":"<code>INFO = _internal_logger.level('INFO')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Debug level logging - used for regular info - level no. 20</p>"},{"location":"reference/logging/#kevinbotlib.logger.Level.WARNING","title":"<code>WARNING = _internal_logger.level('WARNING')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Warnng level logging - used for warnings and recommended fixes - level no. 30</p>"},{"location":"reference/logging/#kevinbotlib.logger.Level.ERROR","title":"<code>ERROR = _internal_logger.level('ERROR')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error level logging - used for non-critical and recoverable errors - level no. 40</p>"},{"location":"reference/logging/#kevinbotlib.logger.Level.SECURITY","title":"<code>SECURITY = _internal_logger.level('SECURITY', 45, '&lt;bg 202&gt;&lt;bold&gt;')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Security level logging - used for non-application-breaking secutiry issues/threats - level no. 45</p>"},{"location":"reference/logging/#kevinbotlib.logger.Level.CRITICAL","title":"<code>CRITICAL = _internal_logger.level('CRITICAL')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Error level logging - used for critical and non-recoverable errors - level no. 50</p>"},{"location":"reference/logging/#kevinbotlib.logger.Logger","title":"<code>kevinbotlib.logger.Logger</code>","text":""},{"location":"reference/logging/#kevinbotlib.logger.Logger.config","title":"<code>config</code>  <code>property</code>","text":"<p>Get the current logger configuration.</p> <p>Returns:</p> Type Description <code>LoggerConfiguration | None</code> <p>Current global logger configuration.</p>"},{"location":"reference/logging/#kevinbotlib.logger.Logger.loguru_logger","title":"<code>loguru_logger</code>  <code>property</code>","text":"<p>Get the internal loguru logger instance.</p> <p>Returns:</p> Type Description <code>Logger</code> <p>Loguru logger.</p>"},{"location":"reference/logging/#kevinbotlib.logger.Logger.__init__","title":"<code>__init__()</code>","text":"<p>Create a logger instance</p>"},{"location":"reference/logging/#kevinbotlib.logger.Logger.suppress","title":"<code>suppress()</code>  <code>classmethod</code>","text":"<p>Content manager to suppress all logging.</p>"},{"location":"reference/logging/#kevinbotlib.logger.Logger.configure","title":"<code>configure(config)</code>","text":"<p>Configures file-based logging with rotation and cleanup.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>LoggerConfiguration</code> <p>Logger configuration.</p> required"},{"location":"reference/logging/#kevinbotlib.logger.Logger.add_hook","title":"<code>add_hook(hook)</code>","text":"<p>Add a new serialized logger write hook.</p> <p>Parameters:</p> Name Type Description Default <code>hook</code> <code>Callable[[Message], None]</code> <p>Logger write hook.</p> required"},{"location":"reference/logging/#kevinbotlib.logger.Logger.add_hook_ansi","title":"<code>add_hook_ansi(hook)</code>","text":"<p>Add a new ANSI logger write hook.</p> <p>Parameters:</p> Name Type Description Default <code>hook</code> <code>Callable[[str], None]</code> <p>Logger write hook.</p> required"},{"location":"reference/logging/#kevinbotlib.logger.Logger.log","title":"<code>log(level, message, opts=None)</code>","text":"<p>Log a message with the specified level and options.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>Level</code> <p>Logger level</p> required <code>message</code> <code>str | BaseException</code> <p>Message to log. Can be a string or an exception.</p> required <code>opts</code> <code>LoggerWriteOpts | None</code> <p>Logger options.</p> <code>None</code>"},{"location":"reference/logging/#kevinbotlib.logger.Logger.trace","title":"<code>trace(message)</code>","text":"<p>Log a trace message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message</p> required"},{"location":"reference/logging/#kevinbotlib.logger.Logger.debug","title":"<code>debug(message)</code>","text":"<p>Log a debug message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message</p> required"},{"location":"reference/logging/#kevinbotlib.logger.Logger.info","title":"<code>info(message)</code>","text":"<p>Log an info message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message</p> required"},{"location":"reference/logging/#kevinbotlib.logger.Logger.warning","title":"<code>warning(message)</code>","text":"<p>Log a warning message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message</p> required"},{"location":"reference/logging/#kevinbotlib.logger.Logger.warn","title":"<code>warn(message)</code>","text":"<p>Log a warning message. Deprecated. Use Logger.warning() instead.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message</p> required"},{"location":"reference/logging/#kevinbotlib.logger.Logger.error","title":"<code>error(message)</code>","text":"<p>Log an error message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message</p> required"},{"location":"reference/logging/#kevinbotlib.logger.Logger.security","title":"<code>security(message)</code>","text":"<p>Log a security message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message</p> required"},{"location":"reference/logging/#kevinbotlib.logger.LoggerConfiguration","title":"<code>kevinbotlib.logger.LoggerConfiguration</code>  <code>dataclass</code>","text":"<p>Configuration for the logger</p>"},{"location":"reference/logging/#kevinbotlib.logger.LoggerConfiguration.level","title":"<code>level = Level.INFO</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Global logging level. Defaults to INFO.</p>"},{"location":"reference/logging/#kevinbotlib.logger.LoggerConfiguration.enable_stderr_logger","title":"<code>enable_stderr_logger = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Enable logging to stderr. Defaults to True.</p>"},{"location":"reference/logging/#kevinbotlib.logger.LoggerConfiguration.file_logger","title":"<code>file_logger = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>File-based logging configuration. Defaults to None.</p>"},{"location":"reference/logging/#kevinbotlib.logger.LoggerDirectories","title":"<code>kevinbotlib.logger.LoggerDirectories</code>","text":""},{"location":"reference/logging/#kevinbotlib.logger.LoggerDirectories.get_logger_directory","title":"<code>get_logger_directory(*, ensure_exists=True)</code>  <code>staticmethod</code>","text":"<p>Returns the log directory path and ensures its existence if needed.</p> <p>Parameters:</p> Name Type Description Default <code>ensure_exists</code> <code>bool</code> <p>Create the directory if it doesn't exist.</p> <code>True</code> <p>Returns:</p> Type Description <code>str</code> <p>The log directory path.</p>"},{"location":"reference/logging/#kevinbotlib.logger.LoggerDirectories.cleanup_logs","title":"<code>cleanup_logs(directory, max_size_mb=500)</code>  <code>staticmethod</code>","text":"<p>Deletes oldest log files if the total log directory exceeds max_size_mb.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>Log directory path.</p> required <code>max_size_mb</code> <code>int</code> <p>Maximum size of the log directory in MB.</p> <code>500</code>"},{"location":"reference/logging/#kevinbotlib.logger.LoggerDirectories.get_directory_size","title":"<code>get_directory_size(directory)</code>  <code>staticmethod</code>","text":"<p>Returns the size of the directory in MB.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>Directory to measure size.</p> required <p>Returns:</p> Type Description <code>float</code> <p>Directory size in MB.</p>"},{"location":"reference/logging/#kevinbotlib.logger.LoggerWriteOpts","title":"<code>kevinbotlib.logger.LoggerWriteOpts</code>  <code>dataclass</code>","text":"<p>Options for writing to the logger</p>"},{"location":"reference/logging/#kevinbotlib.logger.LoggerWriteOpts.depth","title":"<code>depth = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Logger depth. Used to determine the statement that triggered the log. Defaults to 1.</p>"},{"location":"reference/logging/#kevinbotlib.logger.LoggerWriteOpts.colors","title":"<code>colors = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Enable colorized output. Defaults to True.</p>"},{"location":"reference/logging/#kevinbotlib.logger.LoggerWriteOpts.ansi","title":"<code>ansi = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Enable ANSI escape codes. Defaults to True.</p>"},{"location":"reference/logging/#kevinbotlib.logger.LoggerWriteOpts.exception","title":"<code>exception = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Exception to send to the logger. Defaults to False.</p>"},{"location":"reference/logging/#kevinbotlib.logger.StreamRedirector","title":"<code>kevinbotlib.logger.StreamRedirector</code>","text":"<p>               Bases: <code>IO</code></p> <p>Redirect a stream to logging</p>"},{"location":"reference/logging/#kevinbotlib.logger.StreamRedirector.__init__","title":"<code>__init__(logger, level=Level.INFO)</code>","text":"<p>Initialize the log stream redirector.</p> <p>Parameters:</p> Name Type Description Default <code>logger</code> <code>Logger</code> <p>Logger to redirect the stream to.</p> required <code>level</code> <code>Level</code> <p>Level to log at.</p> <code>INFO</code>"},{"location":"reference/logging/#kevinbotlib.remotelog","title":"<code>kevinbotlib.remotelog</code>","text":""},{"location":"reference/logging/#kevinbotlib.remotelog.ANSILogSender","title":"<code>kevinbotlib.remotelog.ANSILogSender</code>","text":"<p>Class to send ANSI-formatted log entries over Redis Pub/Sub</p>"},{"location":"reference/logging/#kevinbotlib.remotelog.ANSILogReceiver","title":"<code>kevinbotlib.remotelog.ANSILogReceiver</code>","text":"<p>Class to receive ANSI-formatted log entries over Redis Pub/Sub</p>"},{"location":"reference/logging/#kevinbotlib.logger.downloader","title":"<code>kevinbotlib.logger.downloader</code>","text":""},{"location":"reference/logging/#kevinbotlib.logger.downloader.RemoteLogDownloader","title":"<code>kevinbotlib.logger.downloader.RemoteLogDownloader</code>","text":"<p>Tool for downloading logs from a remote host using SFTP.</p>"},{"location":"reference/logging/#kevinbotlib.logger.downloader.RemoteLogDownloader.connect_with_password","title":"<code>connect_with_password(host, username, password, port=22, missing_host_key_policy=default_missing_host_key_policy)</code>","text":"<p>Connect to a remote host using a password.</p>"},{"location":"reference/logging/#kevinbotlib.logger.downloader.RemoteLogDownloader.connect_with_key","title":"<code>connect_with_key(host, username, key, port=22, missing_host_key_policy=default_missing_host_key_policy)</code>","text":"<p>Connect to a remote host using a Paramiko RSA key.</p>"},{"location":"reference/logging/#kevinbotlib.logger.parser","title":"<code>kevinbotlib.logger.parser</code>","text":""},{"location":"reference/logging/#kevinbotlib.logger.parser.LogEntry","title":"<code>kevinbotlib.logger.parser.LogEntry</code>  <code>dataclass</code>","text":"<p>Class representing a single log entry.</p>"},{"location":"reference/logging/#kevinbotlib.logger.parser.LogEntry.timestamp","title":"<code>timestamp</code>  <code>instance-attribute</code>","text":"<p>Timestamp of the log entry.</p>"},{"location":"reference/logging/#kevinbotlib.logger.parser.LogEntry.modname","title":"<code>modname</code>  <code>instance-attribute</code>","text":"<p>Module name of the log entry.</p>"},{"location":"reference/logging/#kevinbotlib.logger.parser.LogEntry.function","title":"<code>function</code>  <code>instance-attribute</code>","text":"<p>Function name of the log entry.</p>"},{"location":"reference/logging/#kevinbotlib.logger.parser.LogEntry.line","title":"<code>line</code>  <code>instance-attribute</code>","text":"<p>Line of code where the log entry was generated.</p>"},{"location":"reference/logging/#kevinbotlib.logger.parser.LogEntry.level_no","title":"<code>level_no</code>  <code>instance-attribute</code>","text":"<p>Log level number.</p>"},{"location":"reference/logging/#kevinbotlib.logger.parser.LogEntry.level_name","title":"<code>level_name</code>  <code>instance-attribute</code>","text":"<p>Log level name.</p>"},{"location":"reference/logging/#kevinbotlib.logger.parser.LogEntry.level_icon","title":"<code>level_icon</code>  <code>instance-attribute</code>","text":"<p>Log level icon.</p>"},{"location":"reference/logging/#kevinbotlib.logger.parser.LogEntry.message","title":"<code>message</code>  <code>instance-attribute</code>","text":"<p>Messages logged.</p>"},{"location":"reference/logging/#kevinbotlib.logger.parser.Log","title":"<code>kevinbotlib.logger.parser.Log</code>","text":"<p>               Bases: <code>list</code></p> <p>Class representing a list of LogEntry instances.</p>"},{"location":"reference/logging/#kevinbotlib.logger.parser.Log.__init__","title":"<code>__init__(entries=None)</code>","text":"<p>Create a new log object.</p> <p>Parameters:</p> Name Type Description Default <code>entries</code> <code>list[LogEntry] | None</code> <p>List of LogEntry instances. Defaults to None.</p> <code>None</code>"},{"location":"reference/logging/#kevinbotlib.logger.parser.Log.append","title":"<code>append(item)</code>","text":"<p>Append a new LogEntry to the log.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>LogEntry</code> <p>New LogEntry to append.</p> required"},{"location":"reference/logging/#kevinbotlib.logger.parser.Log.extend","title":"<code>extend(items)</code>","text":"<p>Extend the log with a list of LogEntry instances.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>list[LogEntry] | Log</code> <p>List is of LogEntry instances.</p> required"},{"location":"reference/logging/#kevinbotlib.logger.parser.Log.insert","title":"<code>insert(index, item)</code>","text":"<p>Insert a new LogEntry into the log at the specified index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>Index to insert the LogEntry at.</p> required <code>item</code> <code>LogEntry</code> <p>LogEntry to insert.</p> required"},{"location":"reference/logging/#kevinbotlib.logger.parser.LogParser","title":"<code>kevinbotlib.logger.parser.LogParser</code>","text":"<p>Class for parsing log data.</p>"},{"location":"reference/logging/#kevinbotlib.logger.parser.LogParser.parse","title":"<code>parse(data)</code>  <code>staticmethod</code>","text":"<p>Parse raw log file data into a Log object.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>Log file data.</p> required <p>Returns: Log object.</p>"},{"location":"reference/metrics/","title":"Metrics and System Info API","text":""},{"location":"reference/metrics/#kevinbotlib.metrics","title":"<code>kevinbotlib.metrics</code>","text":""},{"location":"reference/metrics/#kevinbotlib.metrics.MetricType","title":"<code>kevinbotlib.metrics.MetricType</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Display types for <code>kevinbotlib.metrics.Metric</code></p>"},{"location":"reference/metrics/#kevinbotlib.metrics.MetricType.RawType","title":"<code>RawType = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Display the value raw</p>"},{"location":"reference/metrics/#kevinbotlib.metrics.MetricType.PercentageUsedType","title":"<code>PercentageUsedType = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Display the value as a percentage used. Dashboards may assume that the percentage available is <code>1.0 - value</code></p>"},{"location":"reference/metrics/#kevinbotlib.metrics.MetricType.PercentageRemainingType","title":"<code>PercentageRemainingType = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Display the value as a percentage remaining. Dashboards may assume that the percentage used is <code>1.0 - value</code></p>"},{"location":"reference/metrics/#kevinbotlib.metrics.MetricType.TemperatureCelciusType","title":"<code>TemperatureCelciusType = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Display the value as a temperature in Celcius. Dashboards may convert to Fahrenheit.</p>"},{"location":"reference/metrics/#kevinbotlib.metrics.MetricType.TemperatureFahrenheitType","title":"<code>TemperatureFahrenheitType = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Display the value as a temperature in Fahrenheit. Dashboards may convert to Celcius.</p>"},{"location":"reference/metrics/#kevinbotlib.metrics.MetricType.BytesType","title":"<code>BytesType = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Display the values as a number of bytes. Dashboards may convert it into human readable KB, MB, etc</p>"},{"location":"reference/metrics/#kevinbotlib.metrics.MetricType.BooleanType","title":"<code>BooleanType = 6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Display the value as a boolean.</p>"},{"location":"reference/metrics/#kevinbotlib.metrics.Metric","title":"<code>kevinbotlib.metrics.Metric</code>","text":"<p>A single system metric</p> <p>Examples: Memory Free, CPU Usage, CPU Temperature, etc</p>"},{"location":"reference/metrics/#kevinbotlib.metrics.Metric.title","title":"<code>title</code>  <code>instance-attribute</code>","text":"<p>The title of the metric</p>"},{"location":"reference/metrics/#kevinbotlib.metrics.Metric.value","title":"<code>value = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The value of the metric</p>"},{"location":"reference/metrics/#kevinbotlib.metrics.Metric.kind","title":"<code>kind = MetricType.RawType</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>How should the metric be displayed?</p>"},{"location":"reference/metrics/#kevinbotlib.metrics.SystemMetrics","title":"<code>kevinbotlib.metrics.SystemMetrics</code>","text":"<p>Keep track of various system metrics</p> <p>Example metrics: CPU usage, CPU temperature, Disk usage, etc...</p>"},{"location":"reference/metrics/#kevinbotlib.metrics.SystemMetrics.add","title":"<code>add(identifier, metric)</code>","text":"<p>Add a new metric</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Metric identifier. Will not be displayed in dashboards.</p> required <code>metric</code> <code>Metric</code> <p>The metric to add</p> required"},{"location":"reference/metrics/#kevinbotlib.metrics.SystemMetrics.update","title":"<code>update(identifier, value)</code>","text":"<p>Update the value of a metric</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>The metric identifier to update</p> required <code>value</code> <code>str | int | float | None</code> <p>The new value</p> required"},{"location":"reference/metrics/#kevinbotlib.metrics.SystemMetrics.get","title":"<code>get(identifier)</code>","text":"<p>Retrieve the value of a metric</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>Identifier of the metric to get</p> required <p>Returns:</p> Type Description <code>Metric</code> <p>A system metric</p>"},{"location":"reference/metrics/#kevinbotlib.metrics.SystemMetrics.getall","title":"<code>getall()</code>","text":"<p>Get all available system metrics</p> <p>Returns:</p> Type Description <code>dict[str, Metric]</code> <p>Identifier-metric pair dictionary</p>"},{"location":"reference/metrics/#kevinbotlib.system","title":"<code>kevinbotlib.system</code>","text":""},{"location":"reference/metrics/#kevinbotlib.system.CPUInfo","title":"<code>kevinbotlib.system.CPUInfo</code>","text":"<p>CPU Information Type</p>"},{"location":"reference/metrics/#kevinbotlib.system.CPUInfo.cores_logical","title":"<code>cores_logical</code>  <code>instance-attribute</code>","text":"<p>Logical cores</p>"},{"location":"reference/metrics/#kevinbotlib.system.CPUInfo.cores_physical","title":"<code>cores_physical</code>  <code>instance-attribute</code>","text":"<p>Physical cores</p>"},{"location":"reference/metrics/#kevinbotlib.system.CPUInfo.frequency_current","title":"<code>frequency_current</code>  <code>instance-attribute</code>","text":"<p>Current running CPU frequency</p>"},{"location":"reference/metrics/#kevinbotlib.system.CPUInfo.frequency_min","title":"<code>frequency_min</code>  <code>instance-attribute</code>","text":"<p>Minimum operational CPU frequency</p>"},{"location":"reference/metrics/#kevinbotlib.system.CPUInfo.frequency_max","title":"<code>frequency_max</code>  <code>instance-attribute</code>","text":"<p>Maximum operational CPU frequency</p>"},{"location":"reference/metrics/#kevinbotlib.system.CPUInfo.usage_percent_per_core","title":"<code>usage_percent_per_core</code>  <code>instance-attribute</code>","text":"<p>Percent CPU usage per core</p>"},{"location":"reference/metrics/#kevinbotlib.system.CPUInfo.total_usage_percent","title":"<code>total_usage_percent</code>  <code>instance-attribute</code>","text":"<p>Total CPU usage percentage</p>"},{"location":"reference/metrics/#kevinbotlib.system.MemoryInfo","title":"<code>kevinbotlib.system.MemoryInfo</code>","text":"<p>Memory Information Type</p>"},{"location":"reference/metrics/#kevinbotlib.system.MemoryInfo.total","title":"<code>total</code>  <code>instance-attribute</code>","text":"<p>Total memory amount (bytes)</p>"},{"location":"reference/metrics/#kevinbotlib.system.MemoryInfo.available","title":"<code>available</code>  <code>instance-attribute</code>","text":"<p>Total memory available (bytes)</p>"},{"location":"reference/metrics/#kevinbotlib.system.MemoryInfo.used","title":"<code>used</code>  <code>instance-attribute</code>","text":"<p>Total memory used (bytes)</p>"},{"location":"reference/metrics/#kevinbotlib.system.MemoryInfo.free","title":"<code>free</code>  <code>instance-attribute</code>","text":"<p>Total memory free (bytes)</p>"},{"location":"reference/metrics/#kevinbotlib.system.MemoryInfo.percent","title":"<code>percent</code>  <code>instance-attribute</code>","text":"<p>Total memory used (percent)</p>"},{"location":"reference/metrics/#kevinbotlib.system.DiskInfo","title":"<code>kevinbotlib.system.DiskInfo</code>","text":"<p>Disk Information Type</p>"},{"location":"reference/metrics/#kevinbotlib.system.DiskInfo.device","title":"<code>device</code>  <code>instance-attribute</code>","text":"<p>Device path</p>"},{"location":"reference/metrics/#kevinbotlib.system.DiskInfo.mountpoint","title":"<code>mountpoint</code>  <code>instance-attribute</code>","text":"<p>Disk mountpoint</p>"},{"location":"reference/metrics/#kevinbotlib.system.DiskInfo.fstype","title":"<code>fstype</code>  <code>instance-attribute</code>","text":"<p>Disk filesystem type</p>"},{"location":"reference/metrics/#kevinbotlib.system.DiskInfo.total","title":"<code>total</code>  <code>instance-attribute</code>","text":"<p>Total disk bytes</p>"},{"location":"reference/metrics/#kevinbotlib.system.DiskInfo.used","title":"<code>used</code>  <code>instance-attribute</code>","text":"<p>Total disk space used (bytes)</p>"},{"location":"reference/metrics/#kevinbotlib.system.DiskInfo.free","title":"<code>free</code>  <code>instance-attribute</code>","text":"<p>Total disk space free (bytes)</p>"},{"location":"reference/metrics/#kevinbotlib.system.DiskInfo.percent","title":"<code>percent</code>  <code>instance-attribute</code>","text":"<p>Total disk used (percent)</p>"},{"location":"reference/metrics/#kevinbotlib.system.SystemPerformanceData","title":"<code>kevinbotlib.system.SystemPerformanceData</code>","text":"<p>System information API</p>"},{"location":"reference/metrics/#kevinbotlib.system.SystemPerformanceData.cpu","title":"<code>cpu()</code>  <code>staticmethod</code>","text":"<p>Gets CPU information</p> <p>Returns:</p> Type Description <code>CPUInfo</code> <p>CPU Information</p>"},{"location":"reference/metrics/#kevinbotlib.system.SystemPerformanceData.memory","title":"<code>memory()</code>  <code>staticmethod</code>","text":"<p>Gets memory information</p> <p>Returns:</p> Type Description <code>MemoryInfo</code> <p>Memory information</p>"},{"location":"reference/metrics/#kevinbotlib.system.SystemPerformanceData.disks","title":"<code>disks()</code>  <code>staticmethod</code>","text":"<p>Gets system disk(s) information</p> <p>Returns:</p> Type Description <code>list[DiskInfo]</code> <p>Disk information</p>"},{"location":"reference/metrics/#kevinbotlib.system.SystemPerformanceData.primary_disk","title":"<code>primary_disk()</code>  <code>staticmethod</code>","text":"<p>Gets system primary disk information</p> <p>Returns:</p> Type Description <code>DiskInfo</code> <p>Primary disk information</p>"},{"location":"reference/misc/","title":"Miscellaneous Reference","text":""},{"location":"reference/misc/#kevinbotlib.util","title":"<code>kevinbotlib.util</code>","text":""},{"location":"reference/misc/#kevinbotlib.util.fullclassname","title":"<code>kevinbotlib.util.fullclassname(o)</code>","text":"<p>Get the full name of a class</p> <p>Parameters:</p> Name Type Description Default <code>o</code> <code>object</code> <p>The class to retrieve the full name of</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The name of the module and class</p>"},{"location":"reference/misc/#kevinbotlib.util.is_binary","title":"<code>kevinbotlib.util.is_binary()</code>","text":"<p>Detect if the application is running as a frozen executable or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Is frozen?</p>"},{"location":"reference/misc/#kevinbotlib.licenses","title":"<code>kevinbotlib.licenses</code>","text":""},{"location":"reference/misc/#kevinbotlib.licenses.get_licenses","title":"<code>kevinbotlib.licenses.get_licenses()</code>","text":"<p>Return all licenses of KevinbotLib and it's dependencies</p> <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>dict[str, str]: license name-license text</p>"},{"location":"reference/misc/#kevinbotlib.deployment","title":"<code>kevinbotlib.deployment</code>","text":""},{"location":"reference/misc/#kevinbotlib.deployment.GitManifestData","title":"<code>kevinbotlib.deployment.GitManifestData</code>","text":"<p>               Bases: <code>TypedDict</code></p> <p>Git data generated by the deployment process.</p>"},{"location":"reference/misc/#kevinbotlib.deployment.GitManifestData.branch","title":"<code>branch</code>  <code>instance-attribute</code>","text":"<p>Git branch</p>"},{"location":"reference/misc/#kevinbotlib.deployment.GitManifestData.tag","title":"<code>tag</code>  <code>instance-attribute</code>","text":"<p>Git tag</p>"},{"location":"reference/misc/#kevinbotlib.deployment.GitManifestData.commit","title":"<code>commit</code>  <code>instance-attribute</code>","text":"<p>Git commit</p>"},{"location":"reference/misc/#kevinbotlib.deployment.Manifest","title":"<code>kevinbotlib.deployment.Manifest</code>  <code>dataclass</code>","text":"<p>Manifest contents generated by the deployment process.</p>"},{"location":"reference/misc/#kevinbotlib.deployment.Manifest.deploytool","title":"<code>deploytool</code>  <code>instance-attribute</code>","text":"<p>KevinbotLib DeployTool Version</p>"},{"location":"reference/misc/#kevinbotlib.deployment.Manifest.timestamp","title":"<code>timestamp</code>  <code>instance-attribute</code>","text":"<p>Deployment UTC Timestamp</p>"},{"location":"reference/misc/#kevinbotlib.deployment.Manifest.git","title":"<code>git</code>  <code>instance-attribute</code>","text":"<p>Deployment Git Data</p>"},{"location":"reference/misc/#kevinbotlib.deployment.Manifest.robot","title":"<code>robot</code>  <code>instance-attribute</code>","text":"<p>Deployed Robot Name</p>"},{"location":"reference/misc/#kevinbotlib.deployment.ManifestParser","title":"<code>kevinbotlib.deployment.ManifestParser</code>","text":"<p>Parser for the deployment manifest.</p>"},{"location":"reference/misc/#kevinbotlib.deployment.ManifestParser.path","title":"<code>path</code>  <code>property</code>","text":"<p>Get the manifest path.</p> <p>Returns:</p> Type Description <code>Path</code> <p>pathlib.Path: Manifest path.</p>"},{"location":"reference/misc/#kevinbotlib.deployment.ManifestParser.manifest","title":"<code>manifest</code>  <code>property</code>","text":"<p>Get the parsed manifest.</p> <p>Returns:</p> Type Description <code>Manifest</code> <p>Parsed manifest.</p>"},{"location":"reference/misc/#kevinbotlib.deployment.ManifestParser.__init__","title":"<code>__init__(path=None)</code>","text":"<p>Parse the deployment manifest.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path | str | None</code> <p>The deployment manifest path. Defaults to \"deploy/manifest.json\" in the current working directory.</p> <code>None</code>"},{"location":"reference/robot/","title":"Robot Reference","text":""},{"location":"reference/robot/#kevinbotlib.robot","title":"<code>kevinbotlib.robot</code>","text":""},{"location":"reference/robot/#kevinbotlib.robot.InstanceLocker","title":"<code>kevinbotlib.robot.InstanceLocker</code>","text":"<p>Generate and release a lockfile for an entire application. Useful when trying to prevent multiple instances of an app.</p> <p>Verifies if the application was killed without releasing the lockfile.</p>"},{"location":"reference/robot/#kevinbotlib.robot.InstanceLocker.__init__","title":"<code>__init__(lockfile_name)</code>","text":"<p>Initialize the InstanceLocker</p> <p>Parameters:</p> Name Type Description Default <code>lockfile_name</code> <code>str</code> <p>The name of the lockfile (e.g., 'robot.lock').</p> required"},{"location":"reference/robot/#kevinbotlib.robot.InstanceLocker.lock","title":"<code>lock()</code>","text":"<p>Attempt to acquire the lock by creating a lockfile with the current PID.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the lock was successfully acquired, False if another instance is running.</p>"},{"location":"reference/robot/#kevinbotlib.robot.InstanceLocker.unlock","title":"<code>unlock()</code>","text":"<p>Release the lock by removing the lockfile.</p>"},{"location":"reference/robot/#kevinbotlib.robot.InstanceLocker.is_locked","title":"<code>is_locked(lockfile_name)</code>  <code>staticmethod</code>","text":"<p>Check if the lockfile exists and corresponds to a running process.</p> <p>Parameters:</p> Name Type Description Default <code>lockfile_name</code> <code>str</code> <p>The name of the lockfile to check.</p> required <p>Returns:</p> Type Description <code>int</code> <p>-1 if not locked, PID of locking process</p>"},{"location":"reference/robot/#kevinbotlib.robot.BaseRobot","title":"<code>kevinbotlib.robot.BaseRobot</code>","text":""},{"location":"reference/robot/#kevinbotlib.robot.BaseRobot.__init__","title":"<code>__init__(opmodes, serve_port=6379, log_level=Level.INFO, print_level=Level.INFO, default_opmode=None, cycle_time=250, log_cleanup_timer=10.0, metrics_publish_timer=5.0, battery_publish_timer=0.1, robot_heartbeat_interval=1.0, robot_heartbeat_expiry=2.5, *, enable_stderr_logger=False, allow_enable_without_console=False)</code>","text":"<p>Initialize the robot</p> <p>Parameters:</p> Name Type Description Default <code>opmodes</code> <code>list[str]</code> <p>List of operational mode names.</p> required <code>serve_port</code> <code>int</code> <p>Port for comm server. Shouldn't have to be changed in most cases. Defaults to 8765.</p> <code>6379</code> <code>log_level</code> <code>Level</code> <p>Level to logging. Defaults to Level.INFO.</p> <code>INFO</code> <code>print_level</code> <code>Level</code> <p>Level for print statement redirector. Defaults to Level.INFO.</p> <code>INFO</code> <code>enable_stderr_logger</code> <code>bool</code> <p>Enable logging to STDERR, may cause issues when using signal stop. Defaults to False.</p> <code>False</code> <code>default_opmode</code> <code>str</code> <p>Default Operational Mode to start in. Defaults to the first item of <code>opmodes</code>.</p> <code>None</code> <code>cycle_time</code> <code>float</code> <p>How fast to run periodic functions in Hz. Defaults to 250.</p> <code>250</code> <code>log_cleanup_timer</code> <code>float</code> <p>How often to clean up logs in seconds. Set to 0 to disable log cleanup. Defaults to 10.0.</p> <code>10.0</code> <code>metrics_publish_timer</code> <code>float</code> <p>How often to publish system metrics. This is separate from <code>BaseRobot.add_basic_metrics()</code> update_interval. Set to 0 to disable metrics publishing. Defaults to 5.0.</p> <code>5.0</code> <code>battery_publish_timer</code> <code>float</code> <p>How often to publish battery voltages.  Set to 0 to disable battery publishing. Defaults to 0.1.</p> <code>0.1</code> <code>robot_heartbeat_interval</code> <code>float</code> <p>How often to send a heartbeat to the control console. Defaults to 1.0.</p> <code>1.0</code> <code>robot_heartbeat_expiry</code> <code>float</code> <p>How long the robot heartbeat will stay valid. Must be longer than robot_heartbeat_interval. Defaults to 2.0.</p> <code>2.5</code> <code>allow_enable_without_console</code> <code>bool</code> <p>Allow the robot to be enabled without an active control console. Defaults to False.</p> <code>False</code>"},{"location":"reference/robot/#kevinbotlib.robot.BaseRobot.run","title":"<code>run()</code>","text":"<p>Run the robot loop. Method is final.</p>"},{"location":"reference/robot/#kevinbotlib.robot.BaseRobot.robot_start","title":"<code>robot_start()</code>","text":"<p>Run after the robot is initialized</p>"},{"location":"reference/robot/#kevinbotlib.robot.BaseRobot.robot_end","title":"<code>robot_end()</code>","text":"<p>Runs before the robot is requested to stop via service or keyboard interrupt</p>"},{"location":"reference/robot/#kevinbotlib.robot.BaseRobot.robot_periodic","title":"<code>robot_periodic(opmode, enabled)</code>","text":"<p>Periodically runs every robot cycle</p> <p>Parameters:</p> Name Type Description Default <code>opmode</code> <code>str</code> <p>The current OpMode</p> required <code>enabled</code> <code>bool</code> <p>WHether the robot is enabled in this opmode</p> required"},{"location":"reference/robot/#kevinbotlib.robot.BaseRobot.opmode_init","title":"<code>opmode_init(opmode, enabled)</code>","text":"<p>Runs when entering an opmode state (either enabled or disabled)</p> <p>Parameters:</p> Name Type Description Default <code>opmode</code> <code>str</code> <p>The OpMode being entered</p> required <code>enabled</code> <code>bool</code> <p>Whether the robot is enabled in this opmode</p> required"},{"location":"reference/robot/#kevinbotlib.robot.BaseRobot.opmode_exit","title":"<code>opmode_exit(opmode, enabled)</code>","text":"<p>Runs when exiting an opmode state (either enabled or disabled)</p> <p>Parameters:</p> Name Type Description Default <code>opmode</code> <code>str</code> <p>The OpMode being exited</p> required <code>enabled</code> <code>bool</code> <p>Whether the robot was enabled in this opmode</p> required"},{"location":"reference/robot/#kevinbotlib.robot.BaseRobot.estop","title":"<code>estop()</code>","text":"<p>Immediately trigger an emergency stop.</p>"},{"location":"reference/scheduler/","title":"Command Scheduler Reference","text":""},{"location":"reference/scheduler/#kevinbotlib.scheduler","title":"<code>kevinbotlib.scheduler</code>","text":""},{"location":"reference/scheduler/#kevinbotlib.scheduler.Command","title":"<code>kevinbotlib.scheduler.Command</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Synchronous command interface that users will implement</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.Command.init","title":"<code>init()</code>  <code>abstractmethod</code>","text":"<p>Ran once when the command is initialized.</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.Command.execute","title":"<code>execute()</code>  <code>abstractmethod</code>","text":"<p>Ran continuously while the command is active.</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.Command.end","title":"<code>end()</code>  <code>abstractmethod</code>","text":"<p>Ran once when the command is finished.</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.Command.finished","title":"<code>finished()</code>  <code>abstractmethod</code>","text":"<p>Get if the command has finished execution.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the command is finished, False otherwise.</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.Command.then","title":"<code>then(next_command)</code>","text":"<p>Chain commands to run sequentially</p> <p>Parameters:</p> Name Type Description Default <code>next_command</code> <code>Command</code> <p>Command to run next</p> required <p>Returns:</p> Type Description <code>SequentialCommand</code> <p>Sequential Command</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.Command.alongside","title":"<code>alongside(next_command)</code>","text":"<p>Chain commands to run in parallel</p> <p>Parameters:</p> Name Type Description Default <code>next_command</code> <code>Command</code> <p>Command to run alongside this command.</p> required <p>Returns:</p> Type Description <code>ParallelCommand</code> <p>Parallel Command</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.SequentialCommand","title":"<code>kevinbotlib.scheduler.SequentialCommand</code>","text":"<p>               Bases: <code>Command</code></p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.SequentialCommand.__init__","title":"<code>__init__(commands)</code>","text":"<p>Construct a new sequential command.</p> <p>Parameters:</p> Name Type Description Default <code>commands</code> <code>list[Command]</code> <p>List of commands to run sequentially.</p> required"},{"location":"reference/scheduler/#kevinbotlib.scheduler.ParallelCommand","title":"<code>kevinbotlib.scheduler.ParallelCommand</code>","text":"<p>               Bases: <code>Command</code></p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.ParallelCommand.__init__","title":"<code>__init__(commands)</code>","text":"<p>Construct a new parallel command.</p> <p>Parameters:</p> Name Type Description Default <code>commands</code> <code>list[Command]</code> <p>Commands to run in parallel.</p> required"},{"location":"reference/scheduler/#kevinbotlib.scheduler.TriggerActions","title":"<code>kevinbotlib.scheduler.TriggerActions</code>  <code>dataclass</code>","text":"<p>Trigger types to be used internally within the command scheduler</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.TriggerActions.on_true","title":"<code>on_true = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Triggers when a value becomes True</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.TriggerActions.on_false","title":"<code>on_false = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Triggers when a value becomes False</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.TriggerActions.while_true","title":"<code>while_true = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Triggers while a value is True</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.TriggerActions.while_false","title":"<code>while_false = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Triggers while a value is False</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.Trigger","title":"<code>kevinbotlib.scheduler.Trigger</code>","text":""},{"location":"reference/scheduler/#kevinbotlib.scheduler.Trigger.__init__","title":"<code>__init__(trigger_func, command_system)</code>","text":"<p>Create a new Command trigger.</p> <p>Parameters:</p> Name Type Description Default <code>trigger_func</code> <code>Callable[[], bool]</code> <p>Function that returns the value that is polled in the scheduler loop.</p> required <code>command_system</code> <code>CommandScheduler</code> <p>Command scheduler instance to apply the trigger.</p> required"},{"location":"reference/scheduler/#kevinbotlib.scheduler.Trigger.check","title":"<code>check()</code>","text":"<p>Check the current state of the trigger and determine if it has changed. To be used internally within the scheduler lopp.</p> <p>Returns:</p> Type Description <code>tuple[bool, bool]</code> <p>Current state and whether it has changed since the last check.</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.Trigger.on_true","title":"<code>on_true(command_instance)</code>","text":"<p>Trigger a command once when a condition is met.</p> <p>Parameters:</p> Name Type Description Default <code>command_instance</code> <code>Command</code> <p>Command to trigger.</p> required <p>Returns:</p> Type Description <code>Trigger</code> <p>This trigger</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.Trigger.on_false","title":"<code>on_false(command_instance)</code>","text":"<p>Trigger a command once when a condition is unmet.</p> <p>Parameters:</p> Name Type Description Default <code>command_instance</code> <code>Command</code> <p>Command to trigger.</p> required <p>Returns:</p> Type Description <code>Trigger</code> <p>This trigger</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.Trigger.while_true","title":"<code>while_true(command_instance)</code>","text":"<p>Trigger a command once and keep running while a condition is met.</p> <p>Parameters:</p> Name Type Description Default <code>command_instance</code> <code>Command</code> <p>Command to trigger.</p> required <p>Returns:</p> Type Description <code>Trigger</code> <p>This trigger</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.Trigger.while_false","title":"<code>while_false(command_instance)</code>","text":"<p>Trigger a command once and keep running while a condition is unmet.</p> <p>Parameters:</p> Name Type Description Default <code>command_instance</code> <code>Command</code> <p>Command to trigger.</p> required <p>Returns:</p> Type Description <code>Trigger</code> <p>This trigger</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.CommandScheduler","title":"<code>kevinbotlib.scheduler.CommandScheduler</code>","text":""},{"location":"reference/scheduler/#kevinbotlib.scheduler.CommandScheduler.__init__","title":"<code>__init__()</code>","text":"<p>Create a new Command Scheduler.</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.CommandScheduler.get_instance","title":"<code>get_instance()</code>","text":"<p>Get the singleton instance of the CommandScheduler.</p> <p>Returns:</p> Type Description <code>CommandScheduler</code> <p>CommandScheduler instance.</p>"},{"location":"reference/scheduler/#kevinbotlib.scheduler.CommandScheduler.schedule","title":"<code>schedule(command)</code>","text":"<p>Manually schedule a command to run.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>Command</code> <p>Command to schedule.</p> required"},{"location":"reference/scheduler/#kevinbotlib.scheduler.CommandScheduler.register_trigger","title":"<code>register_trigger(trigger)</code>","text":"<p>Register a new command trigger. To be used internally in <code>Trigger</code>.</p> <p>Parameters:</p> Name Type Description Default <code>trigger</code> <code>Trigger</code> <p>Trigger to register.</p> required"},{"location":"reference/scheduler/#kevinbotlib.scheduler.CommandScheduler.iterate","title":"<code>iterate()</code>","text":"<p>Executes one iteration of the command scheduler, processing all scheduled commands and their triggers according to their current state and conditions.</p>"},{"location":"reference/ui/","title":"UI Reference","text":""},{"location":"reference/ui/#kevinbotlib.ui.theme","title":"<code>kevinbotlib.ui.theme</code>","text":""},{"location":"reference/ui/#kevinbotlib.ui.theme.ThemeStyle","title":"<code>kevinbotlib.ui.theme.ThemeStyle</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Theme options for the KevinbotLib UI theme</p>"},{"location":"reference/ui/#kevinbotlib.ui.theme.ThemeStyle.Light","title":"<code>Light = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Light mode</p>"},{"location":"reference/ui/#kevinbotlib.ui.theme.ThemeStyle.Dark","title":"<code>Dark = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Dark mode</p>"},{"location":"reference/ui/#kevinbotlib.ui.theme.ThemeStyle.System","title":"<code>System = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>System theme, uses GTK on Linux, and system preference on Windows/macOS</p>"},{"location":"reference/ui/#kevinbotlib.ui.theme.Theme","title":"<code>kevinbotlib.ui.theme.Theme</code>","text":"<p>Qt theming engine for the KevinbotLib UI style</p>"},{"location":"reference/ui/#kevinbotlib.ui.theme.Theme.__init__","title":"<code>__init__(style)</code>","text":"<p>Initialize the theming system.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>ThemeStyle</code> <p>Theme to use.</p> required"},{"location":"reference/ui/#kevinbotlib.ui.theme.Theme.is_dark","title":"<code>is_dark()</code>","text":"<p>Detect if the currently applied style is dark</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Is the current style dark?</p>"},{"location":"reference/ui/#kevinbotlib.ui.theme.Theme.get_stylesheet","title":"<code>get_stylesheet()</code>","text":"<p>Get the formatted stylesheet string to apply</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Qt QSS Stylesheet string.</p>"},{"location":"reference/ui/#kevinbotlib.ui.theme.Theme.apply","title":"<code>apply(app)</code>","text":"<p>Apply the theme to an application or window</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>QApplication | QMainWindow</code> <p>App or window to apply the theme to.</p> required"},{"location":"reference/ui/#kevinbotlib.ui.theme.Theme.set_style","title":"<code>set_style(style)</code>","text":"<p>Apply a new theme to the application or window.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>ThemeStyle</code> <p>ThemeStyle. Theme to use.</p> required"},{"location":"reference/ui/#kevinbotlib.ui.widgets","title":"<code>kevinbotlib.ui.widgets</code>","text":""},{"location":"reference/ui/#kevinbotlib.ui.widgets.Battery","title":"<code>kevinbotlib.ui.widgets.Battery</code>  <code>dataclass</code>","text":"<p>Battery item to be used in BatteryManager.</p>"},{"location":"reference/ui/#kevinbotlib.ui.widgets.Battery.voltage","title":"<code>voltage</code>  <code>instance-attribute</code>","text":"<p>Current battery voltage.</p>"},{"location":"reference/ui/#kevinbotlib.ui.widgets.Battery.y_min","title":"<code>y_min</code>  <code>instance-attribute</code>","text":"<p>Minimum reasonable battery voltage.</p>"},{"location":"reference/ui/#kevinbotlib.ui.widgets.Battery.y_max","title":"<code>y_max</code>  <code>instance-attribute</code>","text":"<p>Maximum reasonable battery voltage.</p>"},{"location":"reference/ui/#kevinbotlib.ui.widgets.BatteryGrapher","title":"<code>kevinbotlib.ui.widgets.BatteryGrapher</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>Qt widget to plot battery voltage over time.</p>"},{"location":"reference/ui/#kevinbotlib.ui.widgets.BatteryGrapher.__init__","title":"<code>__init__(parent=None)</code>","text":"<p>Create the widget</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QObject | None</code> <p>Parent QObject of the widget. Defaults to None.</p> <code>None</code>"},{"location":"reference/ui/#kevinbotlib.ui.widgets.BatteryGrapher.add","title":"<code>add(value)</code>","text":"<p>Add a new data point, scroll left if necessary.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>New value to add</p> required"},{"location":"reference/ui/#kevinbotlib.ui.widgets.BatteryGrapher.set_range","title":"<code>set_range(y_min, y_max)</code>","text":"<p>Set the y-axis range for the graph.</p> <p>Parameters:</p> Name Type Description Default <code>y_min</code> <code>float</code> <p>Minimum Y value.</p> required <code>y_max</code> <code>float</code> <p>Maximum Y value.</p> required"},{"location":"reference/ui/#kevinbotlib.ui.widgets.BatteryManager","title":"<code>kevinbotlib.ui.widgets.BatteryManager</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>Qt widget to display multiple BatteryGraphers and voltage labels.</p>"},{"location":"reference/ui/#kevinbotlib.ui.widgets.BatteryManager.__init__","title":"<code>__init__(parent=None)</code>","text":"<p>Create the widget.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QObject | None</code> <p>Parent QObject of the widget. Defaults to None.</p> <code>None</code>"},{"location":"reference/ui/#kevinbotlib.ui.widgets.BatteryManager.set","title":"<code>set(batts)</code>","text":"<p>Set the current battery voltages. Will update all graphs.</p> <p>Parameters:</p> Name Type Description Default <code>batts</code> <code>list[Battery]</code> <p>List of batteries</p> required"},{"location":"reference/ui/#kevinbotlib.ui.widgets.LicenseDialog","title":"<code>kevinbotlib.ui.widgets.LicenseDialog</code>","text":"<p>               Bases: <code>QDialog</code></p> <p>Qt Dialog for viewing KevinbotLib's internal licenses.</p>"},{"location":"reference/ui/#kevinbotlib.ui.widgets.LicenseDialog.__init__","title":"<code>__init__(parent=None)</code>","text":"<p>Create the dialog.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QObject | None</code> <p>Parent QObject of the dialog. Defaults to None.</p> <code>None</code>"},{"location":"reference/ui/#kevinbotlib.ui.delegates","title":"<code>kevinbotlib.ui.delegates</code>","text":""},{"location":"reference/ui/#kevinbotlib.ui.delegates.NoFocusDelegate","title":"<code>kevinbotlib.ui.delegates.NoFocusDelegate</code>","text":"<p>               Bases: <code>QStyledItemDelegate</code></p> <p>Qt QStyledItemDelegate that removes the focus indicator</p>"},{"location":"reference/ui/#kevinbotlib.ui.delegates.ComboBoxNoTextDelegate","title":"<code>kevinbotlib.ui.delegates.ComboBoxNoTextDelegate</code>","text":"<p>               Bases: <code>QStyledItemDelegate</code></p> <p>Qt QStyledItemDelegate that removes text from QComboBox</p>"},{"location":"reference/vision/","title":"Vision Reference","text":""},{"location":"reference/vision/#kevinbotlib.vision","title":"<code>kevinbotlib.vision</code>","text":""},{"location":"reference/vision/#kevinbotlib.vision.SingleFrameSendable","title":"<code>kevinbotlib.vision.SingleFrameSendable</code>","text":"<p>               Bases: <code>BinarySendable</code></p> <p>Sendable for a single frame of video or an image</p>"},{"location":"reference/vision/#kevinbotlib.vision.SingleFrameSendable.encoding","title":"<code>encoding</code>  <code>instance-attribute</code>","text":"<p>Frame encoding format</p> <p>Supported encodings: * JPG * PNG</p>"},{"location":"reference/vision/#kevinbotlib.vision.SingleFrameSendable.data_id","title":"<code>data_id = 'kevinbotlib.vision.dtype.frame'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Internally used to differentiate sendable types</p>"},{"location":"reference/vision/#kevinbotlib.vision.SingleFrameSendable.struct","title":"<code>struct = {'dashboard': [{'element': 'value', 'format': 'limit:1024'}, {'element': 'resolution', 'format': 'raw'}, {'element': 'quality', 'format': 'raw'}, {'element': 'encoding', 'format': 'raw'}]}</code>  <code>class-attribute</code>","text":"<p>Data structure suggestion for use in dashboard applications</p>"},{"location":"reference/vision/#kevinbotlib.vision.SingleFrameSendable.get_dict","title":"<code>get_dict()</code>","text":"<p>Return the sendable in dictionary form</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The sendable data</p>"},{"location":"reference/vision/#kevinbotlib.vision.MjpegStreamSendable","title":"<code>kevinbotlib.vision.MjpegStreamSendable</code>","text":"<p>               Bases: <code>SingleFrameSendable</code></p> <p>Sendable for a single frame of an MJPG stream</p> <p>Contains all required information for decoding a video stream</p>"},{"location":"reference/vision/#kevinbotlib.vision.MjpegStreamSendable.data_id","title":"<code>data_id = 'kevinbotlib.vision.dtype.mjpeg'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Internally used to differentiate sendable types</p>"},{"location":"reference/vision/#kevinbotlib.vision.MjpegStreamSendable.quality","title":"<code>quality</code>  <code>instance-attribute</code>","text":"<p>The current JPEG compression level out of 100 - lower means more compression</p>"},{"location":"reference/vision/#kevinbotlib.vision.MjpegStreamSendable.resolution","title":"<code>resolution</code>  <code>instance-attribute</code>","text":"<p>A two integer list containing the video resolution (WIDTH x HEIGHT)</p>"},{"location":"reference/vision/#kevinbotlib.vision.MjpegStreamSendable.encoding","title":"<code>encoding = 'JPG'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Frame encoding format</p>"},{"location":"reference/vision/#kevinbotlib.vision.MjpegStreamSendable.struct","title":"<code>struct = {'dashboard': [{'element': 'value', 'format': 'limit:1024'}, {'element': 'resolution', 'format': 'raw'}, {'element': 'quality', 'format': 'raw'}, {'element': 'encoding', 'format': 'raw'}]}</code>  <code>class-attribute</code>","text":"<p>Data structure suggestion for use in dashboard applications</p>"},{"location":"reference/vision/#kevinbotlib.vision.MjpegStreamSendable.get_dict","title":"<code>get_dict()</code>","text":"<p>Return the sendable in dictionary form</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The sendable data</p>"},{"location":"reference/vision/#kevinbotlib.vision.FrameEncoders","title":"<code>kevinbotlib.vision.FrameEncoders</code>","text":"<p>Encoders from OpenCV Mats into raw bytes or network sendables</p>"},{"location":"reference/vision/#kevinbotlib.vision.FrameEncoders.encode_sendable_jpg","title":"<code>encode_sendable_jpg(frame, quality=80)</code>  <code>staticmethod</code>","text":"<p>Encode an OpenCV Mat to a <code>SingleFrameSendable</code> using JPEG encoding</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>MatLike</code> <p>The Mat to encode</p> required <code>quality</code> <code>int</code> <p>The JPEG quality level. Defaults to 80.</p> <code>80</code> <p>Returns:</p> Name Type Description <code>SingleFrameSendable</code> <code>SingleFrameSendable</code> <p>A sendable to be sent over the network</p>"},{"location":"reference/vision/#kevinbotlib.vision.FrameEncoders.encode_sendable_png","title":"<code>encode_sendable_png(frame, compression=3)</code>  <code>staticmethod</code>","text":"<p>Encode an OpenCV Mat to a <code>SingleFrameSendable</code> using PNG encoding</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>MatLike</code> <p>The Mat to encode</p> required <code>compression</code> <code>int</code> <p>The PNG compression level. Defaults to 3.</p> <code>3</code> <p>Returns:</p> Name Type Description <code>SingleFrameSendable</code> <code>SingleFrameSendable</code> <p>A sendable to be sent over the network</p>"},{"location":"reference/vision/#kevinbotlib.vision.FrameEncoders.encode_jpg","title":"<code>encode_jpg(frame, quality=80)</code>  <code>staticmethod</code>","text":"<p>Encode an OpenCV Mat to raw bytes using JPEG encoding</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>MatLike</code> <p>The Mat to encode</p> required <code>quality</code> <code>int</code> <p>The JPEG quality level. Defaults to 80.</p> <code>80</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>Raw data</p>"},{"location":"reference/vision/#kevinbotlib.vision.FrameEncoders.encode_png","title":"<code>encode_png(frame, compression=3)</code>  <code>staticmethod</code>","text":"<p>Encode an OpenCV Mat to raw bytes using PNG encoding</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>MatLike</code> <p>The Mat to encode</p> required <code>compression</code> <code>int</code> <p>The PNG compression level. Defaults to 3.</p> <code>3</code> <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>Raw data</p>"},{"location":"reference/vision/#kevinbotlib.vision.FrameDecoders","title":"<code>kevinbotlib.vision.FrameDecoders</code>","text":"<p>Decoders from Base64 or network sendables to OpenCV Mats</p>"},{"location":"reference/vision/#kevinbotlib.vision.FrameDecoders.decode_sendable","title":"<code>decode_sendable(sendable)</code>  <code>staticmethod</code>","text":"<p>Decode a SingleFrameSendable into an OpenCV Mat</p> <p>Parameters:</p> Name Type Description Default <code>sendable</code> <code>SingleFrameSendable</code> <p>The sendable to decode</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the encoding type isn't recognized</p> <p>Returns:</p> Name Type Description <code>MatLike</code> <code>MatLike</code> <p>An OpenCV Mat</p>"},{"location":"reference/vision/#kevinbotlib.vision.FrameDecoders.decode_base64","title":"<code>decode_base64(data, encoding)</code>  <code>staticmethod</code>","text":"<p>Decode a base64 string into an OpenCV Mat</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The base64 data to decode</p> required <code>encoding</code> <code>str</code> <p>The encoding format. Can be JPG or \"PNG\"</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the encoding type isn't recognized</p> <p>Returns:</p> Name Type Description <code>MatLike</code> <code>MatLike</code> <p>An OpenCV Mat</p>"},{"location":"reference/vision/#kevinbotlib.vision.VisionCommUtils","title":"<code>kevinbotlib.vision.VisionCommUtils</code>","text":"<p>Various utilities to integrate vision data with networking</p>"},{"location":"reference/vision/#kevinbotlib.vision.VisionCommUtils.init_comms_types","title":"<code>init_comms_types(client)</code>  <code>staticmethod</code>","text":"<p>Allows the use of frame data over the communication client</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>RedisCommClient</code> <p>The communication client to integrate with</p> required"},{"location":"reference/vision/#kevinbotlib.vision.BaseCamera","title":"<code>kevinbotlib.vision.BaseCamera</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for creating Vision Cameras</p>"},{"location":"reference/vision/#kevinbotlib.vision.BaseCamera.get_frame","title":"<code>get_frame()</code>  <code>abstractmethod</code>","text":"<p>Get the current frame from the camera</p> <p>Returns:</p> Type Description <code>tuple[bool, MatLike]</code> <p>tuple[bool, MatLike]: Frame retrieval success and an OpenCV Mat</p>"},{"location":"reference/vision/#kevinbotlib.vision.BaseCamera.set_resolution","title":"<code>set_resolution(width, height)</code>  <code>abstractmethod</code>","text":"<p>Attempt to set the current camera resolution</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Frame width in px</p> required <code>height</code> <code>int</code> <p>Frame height in px</p> required"},{"location":"reference/vision/#kevinbotlib.vision.CameraByIndex","title":"<code>kevinbotlib.vision.CameraByIndex</code>","text":"<p>               Bases: <code>BaseCamera</code></p> <p>Create an OpenCV camera from a device index</p> <p>Not recommended if you have more than one camera on a system</p>"},{"location":"reference/vision/#kevinbotlib.vision.CameraByIndex.__init__","title":"<code>__init__(index)</code>","text":"<p>Initialize the camera</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>Index of the camera</p> required"},{"location":"reference/vision/#kevinbotlib.vision.CameraByDevicePath","title":"<code>kevinbotlib.vision.CameraByDevicePath</code>","text":"<p>               Bases: <code>BaseCamera</code></p> <p>Create an OpenCV camera from a device path</p>"},{"location":"reference/vision/#kevinbotlib.vision.CameraByDevicePath.__init__","title":"<code>__init__(path)</code>","text":"<p>Initialize the camera</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Device path of the camera ex: <code>/dev/video0</code></p> required"},{"location":"reference/vision/#kevinbotlib.vision.VisionPipeline","title":"<code>kevinbotlib.vision.VisionPipeline</code>","text":"<p>               Bases: <code>ABC</code></p> <p>An abstract vision processing pipeline</p>"},{"location":"reference/vision/#kevinbotlib.vision.VisionPipeline.__init__","title":"<code>__init__(source)</code>","text":"<p>Pipeline initialization</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>Callable[[], tuple[bool, MatLike]]</code> <p>Getter for the frame to process</p> required"},{"location":"reference/vision/#kevinbotlib.vision.VisionPipeline.run","title":"<code>run(*args, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Runs the vision pipeline</p> <p>Returns:</p> Type Description <code>tuple[bool, MatLike | None]</code> <p>tuple[bool, MatLike | None]: An OpenCV Mat for pipeline visualization purposes. Can be ignored depending on the use case.</p>"},{"location":"reference/vision/#kevinbotlib.vision.VisionPipeline.return_values","title":"<code>return_values()</code>","text":"<p>Retrieves the calculations from the latest pipeline iteration</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Pipeline calculations</p>"},{"location":"reference/vision/#kevinbotlib.vision.EmptyPipeline","title":"<code>kevinbotlib.vision.EmptyPipeline</code>","text":"<p>               Bases: <code>VisionPipeline</code></p> <p>A fake vision pipeline returning the original frame</p>"},{"location":"reference/vision/#kevinbotlib.vision.EmptyPipeline.run","title":"<code>run()</code>","text":"<p>Fake pipeline. Return the inputs.</p> <p>Returns: Source values</p>"}]}